{"version":3,"sources":["components/NavSwitcher.jsx","components/Board/Literal.jsx","components/Board/SquareCol.jsx","components/Board/SquareRow.jsx","components/Board/Cell.jsx","components/Board/Board.jsx","components/Explanations/Explanation.jsx","components/Explanations/ExplanationList.jsx","components/PuzzleBoards/TentsBoard.jsx","components/PuzzleBoards/BinairoBoard.jsx","components/PuzzleBoards/KillerBoard.jsx","components/PuzzleBoards/KakuroBoard.jsx","components/PuzzleBoards/StarBattleBoard.jsx","components/PuzzleBoards/FutoshikiBoard.jsx","components/PuzzleBoards/ThermometerBoard.jsx","components/PuzzleBoards/SkyscrapersBoard.jsx","components/PuzzleBoards/GaramBoard.jsx","components/PuzzleBoards/NonogramBoard.jsx","components/PuzzleBoards/SudokuBoard.jsx","API.js","components/JobWait.jsx","components/PuzzleStepper.jsx","components/FileUploader.jsx","components/MainMenu.jsx","components/DemystifyVisualiser.jsx","reportWebVitals.js","index.js"],"names":["NavSwitcher","state","currentStep","props","newValue","this","maxSteps","setState","setCurrentStep","prevProps","Card","className","Form","inline","onSubmit","e","preventDefault","Button","disabled","variant","onClick","lastStep","bind","stepName","Group","Label","endButton","nextStep","React","Component","Literal","highlighted","prev","highlightExplanation","value","status","Col","style","color","textShadow","textDecoration","fontWeight","fontStyle","backgroundColor","onMouseEnter","toggleHighlight","onMouseLeave","SquareCol","borders","border","marginBottom","marginLeft","margin","background1","background2","background","length","backgroundImage","display","justifyContent","alignItems","backgroundSize","cornerNumber","position","borderRadius","minWidth","fontSize","paddingRight","paddingLeft","zIndex","rightLabel","top","right","bottomLabel","bottom","innerBorders","padding","width","children","paddingBottom","SquareRow","Row","Cell","cellRows","cellContent","cellValues","exp","highlight","highlightBackground","literalBackgrounds","cellBackground","some","row","explanations","includes","toString","isSingleton","singletonValue","getSingletonValue","scale","literalSize","hiddenLiterals","cellBorders","cellInnerBorders","cellMargin","chooseBackground","size","isHidden","getFontSize","Container","fluid","map","i","literal","Board","arr","column","rows","cellBackgrounds","cornerNumbers","rightLabels","bottomLabels","rowsums","endrowsums","colsums","endcolsums","startrows","startcols","xs","col","cells","cell","val","j","sum","getIndex","Explanation","itemStyle","decision","reason","index","ListGroup","Item","deHighlight","ExplanationList","simpleDeductions","deduction","choices","smallestMUSSize","extraChoice","boldBorder","Fragment","Accordion","defaultActiveKey","Header","Toggle","as","eventKey","Collapse","maxHeight","overflowY","Body","setChoice","currentChoice","TentsBoard","x","params","y","Object","values","treecount","backgrounds","push","borderTop","borderBottom","borderLeft","borderRight","getBackgrounds","getCellBorders","key","BinairoBoard","KillerBoard","grid","o","hints","currentHint","left","getCellInnerBorders","getCornerNumbers","KakuroBoard","x_max","y_max","horzsums","vertsums","blanks","bottomColor","topColor","getDiagonalGradient","extraStyle","blocks","gridSize","FutoshikiBoard","lessThans","lt","SIZE","lessThan","i1","i2","j1","j2","getRightLabels","getBottomLabels","ThermometerBoard","therms","xsize","ysize","thermNum","Math","floor","north","south","west","east","SkyscrapersBoard","CLUES","num","GaramBoard","presetvals","operations","op","opMap","1","2","3","NonogramBoard","rowcounts","colcounts","array","_","colIndex","transpose","SudokuBoard","getExamples","a","axios","get","response","data","getExampleData","exampleName","createJob","eprimename","eprime","paramname","param","algorithm","numSteps","explainedLits","appendChoices","choice","post","eprimeName","paramName","jobId","JobWait","pollDelay","pollCount","error","timer","setInterval","checkStatus","prevState","clearInterval","API","then","res","output","setInput","mode","catch","Alert","Spinner","animation","href","window","location","PuzzleStepper","highlightedLiterals","highlightedExplanations","selectedChoice","type","inputObject","continueData","isWaiting","finishedPuzzle","JSON","stringify","step","number","boardProps","StarBattleBoard","isChoicesStep","handleGetNext","obj","finished","slice","result","steps","otherChoices","stepData","getStepData","puzzleState","matrices","getEndButton","appendInput","md","lg","xl","chooseBoard","skippedDeductions","highlightLiteral","getAlternatives","handleSelectChoice","FileUploader","uploadFile","reader","FileReader","onload","text","target","onUpload","fileInput","current","files","name","onError","readAsText","createRef","ref","onChange","MainMenu","componentDidUpdate","isQueueing","onbeforeunload","undefined","examples","isLoadingExamples","isLoadingExampleJSON","setError","isRunning","message","items","Dropdown","example","alt","src","parse","onSelect","chooseExample","id","Menu","Check","checked","handleModeChange","label","handleOptionChange","handleGo","DemystifyVisualiser","render","textAlign","setJSONInput","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.441d78da.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\n\n/**\n * A navigation bar to advance or deadvance steps.\n */\nclass NavSwitcher extends React.Component {\n    state = {\n        currentStep: this.props.currentStep,\n    }\n\n    // Advance\n    nextStep() {\n        const newValue = this.state.currentStep + 1;\n        if (newValue <= this.props.maxSteps) {\n            this.setState({ currentStep: newValue });\n            this.props.setCurrentStep(newValue);\n        }\n    }\n\n    // Deadvance\n    lastStep() {\n        const newValue = this.state.currentStep - 1;\n        if (newValue >= 0) {\n            this.setState({ currentStep: newValue });\n            this.props.setCurrentStep(newValue);\n        }\n    }\n\n    // Ensure current step is kept up to date.\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentStep !== this.props.currentStep) {\n            this.setState({ currentStep: this.props.currentStep });\n        }\n    }\n\n    render() {\n        return (\n            <Card className={this.props.className}>\n\n                <Form inline onSubmit={e => e.preventDefault()} className=\"d-flex justify-content-between\">\n                    <Button disabled={this.state.currentStep === 0} variant=\"primary\" onClick={this.lastStep.bind(this)}>\n                        Last {this.props.stepName}\n                    </Button>\n\n                    {/* Steps are indexed from 0 in JSON but display starting from 1 to the user. */}\n                    <Form.Group>\n                        <Form.Label className=\"w-70 mr-2\">Current {this.props.stepName}:</Form.Label>\n                        <Form.Label className=\"w-70 mr-2\">{this.state.currentStep + 1}</Form.Label>\n                    </Form.Group>\n                    \n                    {this.props.endButton ?\n                    this.props.endButton:\n                    <Button disabled={this.state.currentStep === this.props.maxSteps} variant=\"primary\" onClick={this.nextStep.bind(this)}>\n                        Next {this.props.stepName}\n                    </Button>}\n\n                </Form>\n\n            </Card>\n        )\n    }\n}\n\nexport default NavSwitcher;","import React from 'react';\nimport { Col } from 'react-bootstrap';\n\n/**\n * A small \"possible\" value to display in the grid within each cell.\n * Style indicates in what way it is involved in the current step.\n */\nclass Literal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted\n        }\n    }\n\n    // Highlight/Unhighlight this literal and corresponding explanation\n    toggleHighlight() {\n        this.setState((prev) => { return {highlighted: !prev.highlighted }});\n        this.props.highlightExplanation();\n    }\n\n    // Check whether this literal should be highlighted.\n    componentDidUpdate(prevProps) {\n        if(prevProps.highlighted !== this.props.highlighted) {\n            this.setState({highlighted: this.props.highlighted});\n        }\n    }\n\n    render() {\n        const { value, status } = this.props;\n        return <Col className=\"m-0 p-0\" style={{\n            // Styling dependent on literal status.\n            color:  (status === \"involved\") ? \"blue\" :\n                    (status === \"negative\") ? \"red\" :\n                    (status === \"positive\") ? \"green\" : \"black\",\n            textShadow: (status === \"involved\") ? \"0 0 4px #00FEFE\" : \"none\",\n            textDecoration:\n                (status === \"negative\") ? \"line-through\" : \"none\",\n            fontWeight:\n                (status === \"positive\") ? \"bolder\" : \"normal\",\n            fontStyle:\n                (status === \"involved\") ? \"italic\" : \"normal\",\n            backgroundColor: this.state.highlighted ? \"cornsilk\" : null\n        }}\n            onMouseEnter={this.toggleHighlight.bind(this)} \n            onMouseLeave={this.toggleHighlight.bind(this)}\n        >{value}\n        </Col>\n    }\n\n}\n\nexport default Literal;","import React from 'react';\nimport {Col} from 'react-bootstrap';\n\n/**\n * A Square cell container, with optional extra styling.\n */\nclass SquareCol extends React.Component {\n    \n    render() {\n        const borders = this.props.borders ? this.props.borders :\n        {\n            border: \"2px solid lightgray\",\n            marginBottom: \"-2px\", // Deal with \"doubled\" borders.\n            marginLeft: \"-2px\"\n        }\n\n        const margin = this.props.margin ? this.props.margin : {}\n        \n        let background1 = null\n        let background2 = null\n\n        if (this.props.background) {\n            if (this.props.background.length > 1) {\n                background1 = this.props.background[0]\n                background2 = this.props.background[1]\n            } else {\n                background1 = this.props.background[0]\n            }\n        } else {\n            background1 = this.props.background\n        }\n\n        return (\n            <Col className=\"m-0 p-0\" >\n                <div\n                    style={{\n                        backgroundImage: background2\n                    }}\n                >\n                <div\n                    style={{\n                        ...borders,\n                        ...margin,\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        backgroundImage: background1,\n                        backgroundSize:\"100% 100%\",\n                    }}\n                >   \n                    { // Small optional number to overlay on the cell.\n                    this.props.cornerNumber && <div style={{\n                        position: \"absolute\",\n                        fontWeight: \"bolder\",\n                        color: \"white\",\n                        backgroundColor: \"#0275d8\",\n                        borderRadius: \"10px\",\n                        minWidth: \"1vw\",\n                        fontSize: \"0.8vw\",\n                        paddingRight: \"1px\",\n                        paddingLeft: \"1px\",\n                        zIndex: \"2\",\n                        ...this.props.cornerNumber.style,\n                    }}>\n                        {this.props.cornerNumber.value}\n                    </div>}\n\n                    { // Optional label between this cell and next on the right.\n                    this.props.rightLabel && <div style={{\n                        position: \"absolute\",\n                        top: \"35%\",\n                        right: \"-5%\",\n                        fontSize: \"2vw\",\n                        zIndex: \"2\",\n                    }}>\n                        {this.props.rightLabel}\n                    </div>}\n\n                    { // Optional label between this cell and the next below.\n                    this.props.bottomLabel && <div style={{\n                        position: \"absolute\",\n                        bottom: \"-15%\",\n                        right: \"42%\",\n                        fontSize: \"2vw\"\n                    }}>\n                        {this.props.bottomLabel}\n                    </div>}\n\n                    <div style={{\n                        ...this.props.innerBorders,\n                        padding: \"0px\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}>\n                        {this.props.children /* Main cell content */} \n                        \n                        {/*This div ensure the cell is always square\n                            CSS trick: https://stackoverflow.com/a/28985475/12309539*/}\n                        <div style={{\n                        display: \"block\",\n                        paddingBottom: \"100%\"\n                        }}></div>\n                    </div>\n                    \n                    \n                </div>\n                </div>\n            </Col >\n        )\n    }\n}\n\nexport default SquareCol;","import React from 'react';\nimport {Row} from 'react-bootstrap';\n\n/**\n * Saves typing out the bootstrap class name multiple times.\n */\nclass SquareRow extends React.Component {\n    render() {\n        return (\n            <Row \n                style={this.props.style}\n                className=\"p-0 m-0 d-flex flex-direction-row align-items-center justify-content-center\">\n                {this.props.children}\n            </Row>\n        );\n    }\n}\n\nexport default SquareRow;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport Literal from './Literal';\nimport SquareCol from './SquareCol';\nimport SquareRow from './SquareRow';\n\n/**\n * Cell component, where a cell is itself a grid of possible values.\n * (1 x 1) grid if the value becomes or is known.\n */\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted,\n        }\n    }\n\n    // Whether the cell grid is 1x1 i.e. the value is known.\n    isSingleton() {\n        const cellRows = this.props.cellContent.cellRows;\n\n        return cellRows.length === 1 &&\n                cellRows[0].cellValues.length === 1\n    }\n\n    // Get the first value of the cell grid.\n    getSingletonValue() {\n        const cellRows = this.props.cellContent.cellRows;\n        return cellRows[0].cellValues[0].value\n    }\n\n    // Check whether the cell should be highlighted\n    componentDidUpdate(prevProps) {\n        if (prevProps.highlighted !== this.props.highlighted) {\n            this.setState({ highlighted: this.props.highlighted });\n        }\n    }\n\n    // Call the parent highlight function\n    highlight(exp) {\n        this.props.highlight(exp);\n    }\n\n    /* Choose the cell background, either by reading a mapping for a singleton,\n        or taking the indexed cellBackground. */\n    chooseBackground() {\n\n        const { cellContent, literalBackgrounds, cellBackground } = this.props;\n        const { highlighted } = this.state;\n        let highlightBackground\n\n        if (cellContent.cellRows.some(\n            row => row.cellValues.some(\n                value => value.explanations.includes(\n                    highlighted.toString())))) {\n            highlightBackground = \"linear-gradient(cornsilk, cornsilk)\"\n        } else {\n            highlightBackground = \"\"\n        }\n\n        const isSingleton = this.isSingleton();\n        const singletonValue = this.getSingletonValue();\n\n        if (literalBackgrounds && isSingleton) {\n            return [literalBackgrounds[singletonValue.toString()], highlightBackground]\n        } else if (cellBackground) {\n            return [cellBackground, highlightBackground]\n        } else {\n            return [highlightBackground];\n        }\n    }\n\n    /* Known cells should be 3 times larger. */\n    getFontSize(scale) {\n        const { literalSize } = this.props;\n        if (literalSize) {\n            return (literalSize * scale).toString() + \"vw\"\n        } else {\n            return scale.toString() + \"vw\"\n        }\n    }\n\n    /* Check if a singleton value should be hidden */\n    isHidden(value) {\n        const { hiddenLiterals } = this.props;\n        return hiddenLiterals && hiddenLiterals.includes(value);\n    }\n\n    render() {\n        const {\n            cellContent,\n            cellBorders,\n            cellInnerBorders,\n            cellMargin,\n            cornerNumber,\n            rightLabel,\n            bottomLabel,\n            literalSize } = this.props;\n\n        const {highlighted} = this.state;\n\n        const isSingleton = this.isSingleton();\n        const singletonValue = this.getSingletonValue();\n\n        return (\n            <SquareCol\n                background={this.chooseBackground()}\n                borders={cellBorders}\n                innerBorders={cellInnerBorders}\n                margin={cellMargin}\n                size={literalSize}\n                cornerNumber={cornerNumber}\n                rightLabel={rightLabel}\n                bottomLabel={bottomLabel}>\n\n                {isSingleton ?\n                    // Display a single value if it is known and not hidden.\n                    (\n                        (!this.isHidden(singletonValue)) &&\n                        <h1 style={{ fontSize: this.getFontSize(2) }}>\n                            {singletonValue}\n                        </h1>\n                    ) :\n                    // Otherwise display a grid of possibilities\n                    <Container fluid className=\"p-0 align-items-center\">\n                        {cellContent.cellRows.map((row, i) =>\n                            <SquareRow key={i} style={{ fontSize: this.getFontSize(1) }}>\n                                {row.cellValues.map((literal, i) =>\n                                    // Possibilities are positive/negative literals.\n                                    <Literal\n                                        key={i}\n                                        value={literal.value}\n                                        status={literal.status} // positive / negative\n                                        highlighted={literal.explanations.includes(highlighted.toString())}\n                                        highlightExplanation={() => this.highlight(literal.explanations)}\n                                    />\n                                )}\n                            </SquareRow>\n                        )}\n                    </Container>\n                }\n            </SquareCol>\n        )\n    }\n}\n\nexport default Cell;","import React from 'react';\nimport { Card, Container, Col } from 'react-bootstrap'\nimport Cell from './Cell';\nimport SquareCol from './SquareCol';\nimport SquareRow from './SquareRow';\n\n/**\n * Generic puzzle board component. \n */\nclass Board extends React.Component {\n\n    // Return item at index, if the array prop is defined. \n    getIndex(arr, row, column) {\n        return arr ? arr[row][column] : null;\n    }\n\n    render() {\n        const {\n            // Required Props \n            highlighted, \n            highlight,\n            rows,\n\n            //Optional Props, for custom styling (see README)\n            literalBackgrounds,\n            cellBorders,\n            cellInnerBorders,\n            cellBackgrounds,\n            cellMargin,\n            literalSize,\n            cornerNumbers,\n            rightLabels,\n            bottomLabels,\n            hiddenLiterals,\n            rowsums,\n            endrowsums,\n            colsums,\n            endcolsums,\n            startrows,\n            startcols,\n      \n        } = this.props;\n        \n        return (\n            <Card className=\"mt-3 p-5\">\n                <Container fluid style={{minWidth: \"400px\", padding: \"0px\"}}>\n                    {/*'Thin' row to display column indices.*/}\n                    <SquareRow>\n                        <Col xs={1} className=\"m-0 p-0\" />\n                        {startcols && startcols.map(col =>\n                                <Col className=\"m-0 p-0\"/>)}\n                        {rowsums && <Col className=\"m-0 p-0\" /> /* small corner cell*/}\n                        {rows[0].cells.map((cell, i) =>\n                            <Col key={i} className=\"m-0 p-0\">\n                                <small className=\"text-muted\">{i + 1}</small>\n                            </Col>)}\n                        {endrowsums && <Col className=\"m-0 p-0\" /> /* small corner cell*/}\n                    </SquareRow>\n                    \n                    {startrows && startrows.map(row =>\n                        // Extra rows for e.g. nonogram\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            {startcols && startcols.map(col =>\n                                <SquareCol/>)}\n                            {row.map((val, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {val}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>)}\n\n                    {colsums &&\n                        // Extra row for column sums if necessary.\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            <SquareCol />\n                            {colsums.map((sum, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {sum}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>}\n\n                    {rows.map((row, i) =>\n                        <SquareRow key={i}>\n                            {/* 'Thin' column for column indices */}\n                            <Col xs={1} key={i} className=\"m-0 p-0\">\n                                <small className=\"text-muted\">{i + 1}</small>\n                            </Col>\n\n                            {startcols && startcols.map(col =>\n                                // Extra column for row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {col[i]}\n                                    </h3>\n                                </SquareCol>)}\n\n                            {rowsums &&\n                                // Extra column for row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {rowsums[i]}\n                                    </h3>\n                                </SquareCol>}\n\n                            {row.cells.map((cell, j) =>\n                                    // Main rows of puzzle\n                                    <Cell\n                                        cellContent={cell} \n                                        row={i} \n                                        column={j} \n\n                                        // Whether this cell is currently highlighted\n                                        highlighted={highlighted} \n                                        \n                                        /* Function to highlight explanation when this cell\n                                            is moused over */\n                                        highlight={highlight}\n                                        \n                                        // Styling \n                                        cellBorders={this.getIndex(cellBorders, i, j)}\n                                        cellInnerBorders={this.getIndex(cellInnerBorders, i, j)}\n                                        cellBackground={this.getIndex(cellBackgrounds, i, j)}\n                                        cornerNumber={this.getIndex(cornerNumbers, i, j)}\n                                        rightLabel={this.getIndex(rightLabels, i, j)}\n                                        bottomLabel={this.getIndex(bottomLabels, i, j)}\n                                        cellMargin={cellMargin}\n                                        literalBackgrounds={literalBackgrounds}\n                                        literalSize={literalSize}\n                                        hiddenLiterals={hiddenLiterals}\n                                        />      \n                                )}\n                            {endrowsums &&\n                                // Extra column for end row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {endrowsums[i]}\n                                    </h3>\n                                </SquareCol>}\n                        </SquareRow>)}\n\n                        {endcolsums &&\n                        // Extra row for end column sums if necessary.\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            <SquareCol />\n                            {endcolsums.map((sum, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {sum}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>}\n                </Container>\n            </Card>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\n/**\n * A single explanation/reason that can be highlighted on mouse over.\n */\nclass Explanation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted\n        }\n    }\n\n    highlight() {\n        this.setState({highlighted: true});\n        this.props.highlight();\n    }\n\n    deHighlight() { //...unhighlight? dishighlight?\n        this.setState({highlighted: false});\n        this.props.highlight();\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.highlighted !== this.props.highlighted) { \n            this.setState({highlighted: this.props.highlighted});\n        }\n    }\n\n    render() {\n        const itemStyle =\n            this.state.highlighted ?\n                { backgroundColor: \"cornsilk\" } : null\n                \n        const {decision, reason, index} = this.props\n\n        return <ListGroup.Item\n            style={itemStyle}\n            key={index}\n            onMouseEnter={this.highlight.bind(this)}\n            onMouseLeave={this.deHighlight.bind(this)}>\n            {decision}\n            <br />\n            {reason}\n        </ListGroup.Item>\n    }\n}\n\nexport default Explanation;","import React from 'react';\nimport { Accordion, Card, Button, ListGroup } from 'react-bootstrap';\nimport NavSwitcher from '../NavSwitcher';\nimport Explanation from './Explanation';\n\n/**\n * A sidebar that displays the deductions made on a given step, along with the explanations for that deduction.\n */\nclass ExplanationList extends React.Component {\n\n    render() {\n        const { simpleDeductions, deduction, choices, smallestMUSSize, extraChoice, boldBorder} = this.props;\n        return (\n            <React.Fragment>\n                <Card className=\"mt-3\" border={boldBorder ? \"primary\" : \"none\"}>\n\n                    { /*For simple deductions (just one reason), display a collapsible list */\n                        simpleDeductions ?\n                        <Accordion defaultActiveKey=\"1\">\n                            <Card.Header>\n                                <h5>Made {simpleDeductions.length} simple deductions.</h5>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                    Show/Hide\n                            </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <ListGroup style={{ maxHeight: \"60vh\", overflowY: \"scroll\" }}>\n                                    {\n                                        simpleDeductions.map((deduction, i) => {\n\n                                            return <Explanation\n                                                highlighted={this.props.highlighted.includes(i.toString())}\n                                                decision={deduction.decision}\n                                                reason={deduction.reason}\n                                                index={i}\n                                                key={i}\n                                                highlight={() => this.props.highlight(i)} />\n                                        })\n                                    }\n                                </ListGroup>\n                            </Accordion.Collapse>\n                        </Accordion>\n                        : deduction &&\n                        /* Otherwise we have an \"interesting\" deductions, \n                            so display the deductions with a list of reasons */\n                        <React.Fragment>\n                            <Card.Header>\n                                <h5>Made the following deduction:</h5>\n\n                            </Card.Header>\n                            <Card.Body>\n                                <div className=\"mb-3\">\n                                    <b >{deduction.decision}</b>\n                                </div>\n\n                                <ListGroup style={{ maxHeight: \"75vh\", overflowY: \"scroll\" }}>\n                                    {deduction.reason.map((reason, i) =>\n                                        <Explanation\n                                            highlighted={this.props.highlighted.includes(i.toString())}\n                                            reason={reason}\n                                            index={i}\n                                            key={i}\n                                            highlight={() => this.props.highlight(i)} />)}\n                                </ListGroup>\n                            </Card.Body>\n                        </React.Fragment>\n                    }\n                </Card>\n\n                {/*If there are other choices, display a NavSwitcher to step through the alternatives */\n                choices && \n                    <Card className=\"mt-3\">\n                    <Card.Header>\n                        <b>Found {extraChoice ? choices.length + 1 : choices.length} choices in total for this step:</b>\n                    </Card.Header>\n                    <Card.Body>\n                        <div className=\"mb-3\">\n                            See the alternative deductions with MUS size {smallestMUSSize}:\n                            \n                        </div>\n                        <NavSwitcher \n                            stepName={\"Alt\"} \n                            className=\"p-3\" \n                            setCurrentStep={this.props.setChoice} \n                            maxSteps={extraChoice? choices.length : choices.length - 1}\n                            currentStep={this.props.currentChoice}\n                            />\n                        <div>\n                            <small className=\"text-muted\">\n                                (Note: different MUSs may result in deductions that look identical)\n                            </small>\n                        </div>\n                        {this.props.children}\n                    </Card.Body>\n                \n                </Card>}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ExplanationList;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass TentsBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.params.x,\n            y: this.props.params.y,\n            colsums: Object.values(this.props.params.colsums),\n            rowsums: Object.values(this.props.params.rowsums),\n            treecount: this.props.params.treecount\n        }\n    }\n\n    getBackgrounds() {\n        let backgrounds = {};\n\n        for(let i = 1; i <= this.state.treecount; i++) {\n            backgrounds[\"-\" + i.toString()] = \"url(images/tree.png)\"\n            backgrounds[i.toString()] = \"url(images/tent.png)\"\n        }\n        \n        return backgrounds;\n    }\n\n    \n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < this.state.x; i++) {\n            borders[i] = []\n            for(let j = 0; j < this.state.y; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===this.state.x - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===this.state.y - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n    \n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                literalBackgrounds={this.getBackgrounds()}\n                cellBorders={this.getCellBorders()}\n                />)\n    }\n}\n\nexport default TentsBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass BinairoBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                />)\n    }\n}\n\nexport default BinairoBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KillerBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.grid)\n                .map(o => Object.values(o)),\n            hints: Object.values(this.props.params.hints)\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getCellInnerBorders() {\n        let borders = []\n        const {grid} = this.state;\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: \n                            i===0 || grid[i-1][j] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderBottom: i===8 || grid[i+1][j] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderLeft: j===0 || grid[i][j-1] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderRight: j===8 || grid[i][j+1] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        margin: \"3px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getCornerNumbers() {\n        let cornerNumbers = []\n        const {hints, grid} = this.state;\n        let currentHint = 0;\n\n        for(let i = 0; i < 9; i++) {\n            cornerNumbers[i] = []\n            for(let j = 0; j < 9; j++) {\n                if(grid[i][j] === currentHint + 1) {\n                    cornerNumbers[i].push({value: hints[currentHint], style: {top: \"0%\", left: \"0%\"}})\n                    currentHint++\n                } else \n                    cornerNumbers[i].push({value: null, style: {top: \"0%\", left: \"0%\"}})\n            }\n        }\n        return cornerNumbers\n    }\n    \n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                cellBorders={this.getCellBorders()}\n                cellInnerBorders={this.getCellInnerBorders()}\n                literalSize={0.7}\n                cornerNumbers={this.getCornerNumbers()}\n                />)\n    }\n}\n\nexport default KillerBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KakuroBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.params.x_max,\n            y: this.props.params.y_max,\n            rowsums: Object.values(this.props.params.horzsums).map(\n                o => Object.values(o)),\n            colsums: Object.values(this.props.params.vertsums).map(\n                o => Object.values(o)),\n            blanks:  Object.values(this.props.params.blanks).map(\n                o => Object.values(o))\n        }\n    }\n\n    getDiagonalGradient(bottomColor, topColor) {\n        return `linear-gradient(to bottom left, ${bottomColor}, ${bottomColor} 49%, lightgray 49%, lightgray 51%, ${topColor} 51%, ${topColor})`\n    }\n   \n    getBackgrounds() {\n        const {rowsums, colsums, blanks} = this.state;\n        let backgrounds = []\n        for(let i = 0; i < this.state.x; i++) {\n            backgrounds[i] = []\n            for(let j = 0; j < this.state.y; j++) {\n                if(rowsums[i][j]!==0) {\n                    if(colsums[i][j]!==0) {\n                        backgrounds[i].push(this.getDiagonalGradient(\"white\", \"white\"))\n                    } else {\n                        backgrounds[i].push(this.getDiagonalGradient(\"white\", \"lightblue\"))\n                    }\n                } else {\n                    if(colsums[i][j]!==0) {\n                        backgrounds[i].push(this.getDiagonalGradient(\"lightblue\", \"white\"))\n                    } else {\n                        if(blanks[i][j]===0) {\n                            backgrounds[i].push(\"linear-gradient(lightblue, lightblue)\")\n                        } else {\n                            backgrounds[i].push(\"none\")\n                        }\n                    }\n\n                }\n                \n            }\n        }\n        /*return borders;\n            {\"0\": \"linear-gradient(to bottom left, white, white 49%, lightgray 49%, lightgray 51%, lightblue 51%, lightblue)\"}*/\n        \n\n        return backgrounds;\n    }\n\n    getCornerNumbers() {\n        let cornerNumbers = []\n        const {rowsums, colsums, x, y} = this.state;\n        const extraStyle = {\n            fontWeight: \"bolder\",\n            color: \"gray\",\n            backgroundColor: \"none\",\n            fontSize: \"1.4vw\"}\n\n        for(let i = 0; i < x; i++) {\n            cornerNumbers[i] = []\n            for(let j = 0; j < y; j++) {\n                if(rowsums[i][j] !== 0) {\n                    cornerNumbers[i].push({value: rowsums[i][j], style: {top: \"20%\", right: \"20%\", ...extraStyle}})\n                } else if(i > 0 && colsums[i-1][j] !== 0) {\n                    cornerNumbers[i].push({value: colsums[i-1][j], style: {top: \"-30%\", left: \"20%\", ...extraStyle}})\n                } else \n                    cornerNumbers[i].push({value: null,  style: {top: \"-30%\", left: \"20%\", ...extraStyle}})\n\n            \n            }\n        }\n\n        return cornerNumbers\n    }\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                cellBackgrounds={this.getBackgrounds()}\n                cornerNumbers={this.getCornerNumbers()}\n                hiddenLiterals={[0]}\n                />)\n    }\n}\n\nexport default KakuroBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KakuroBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.blocks)\n                    .map(o => Object.values(o)),\n            gridSize: this.props.params.grid,\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n        const {grid, gridSize} = this.state;\n        for(let i = 0; i < gridSize; i++) {\n            borders[i] = []\n            for(let j = 0; j < gridSize; j++) {\n                borders[i].push(\n                    {\n                        borderTop: \n                            i===0 || grid[i-1][j] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===gridSize - 1 || grid[i+1][j] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 || grid[i][j-1] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===gridSize - 1 || grid[i][j+1] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\"\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getBackgrounds() {\n        let backgrounds = {\"1\": \"url(images/star.png)\"}\n        \n        return backgrounds;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                cellBorders={this.getCellBorders()}\n                literalBackgrounds={this.getBackgrounds()}\n                />)\n    }\n}\n\nexport default KakuroBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass FutoshikiBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lessThans: Object.values(this.props.params.lt)\n                    .map(o => Object.values(o)),\n            size: this.props.params.SIZE\n        }\n    }\n\n    getRightLabels() {\n        let rightLabels = []\n        const {size, lessThans} = this.state;\n        for(let i = 0; i < size; i++) {\n            rightLabels[i] = []\n            for(let j = 0; j < size; j++) {\n                rightLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        for(let lessThan of lessThans) {\n            const i1 = lessThan[0];\n            const i2 = lessThan[1];\n            const j1 = lessThan[2];\n            const j2 = lessThan[3];\n\n            if(i1===j1) {\n                if(i2 < j2) {\n                    rightLabels[i1-1][i2-1] = \"<\"\n                } else {\n                    rightLabels[j1-1][j2-1] = \">\"\n                }\n            }\n        }\n        return rightLabels;\n    }\n\n    getBottomLabels() {\n        let bottomLabels = []\n        const {size, lessThans} = this.state;\n        for(let i = 0; i < size; i++) {\n            bottomLabels[i] = []\n            for(let j = 0; j < size; j++) {\n                bottomLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        for(let lessThan of lessThans) {\n            const i1 = lessThan[0];\n            const i2 = lessThan[1];\n            const j1 = lessThan[2];\n            const j2 = lessThan[3];\n\n            if(i2===j2) {\n                if(i1 < j1) {\n                    bottomLabels[i1-1][i2-1] = \"\\u2227\"\n                } else {\n                    bottomLabels[j1-1][j2-1] = \"\\u2228\"\n                }\n            }\n        }\n\n        return bottomLabels;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                cellMargin={{margin: \"20px\"}}\n                rightLabels={this.getRightLabels()}\n                bottomLabels={this.getBottomLabels()}\n                />)\n    }\n}\n\nexport default FutoshikiBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass ThermometerBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colsums: Object.values(this.props.params.colsums),\n            rowsums: Object.values(this.props.params.rowsums),\n            grid: Object.values(this.props.params.therms)\n                    .map(o => Object.values(o))\n        }\n    }\n\n    getBackgrounds() {\n        const {grid} = this.state;\n        let backgrounds = []\n        const xsize = this.state.grid.length;\n        const ysize = this.state.grid[0].length;\n        for(let i = 0; i < xsize; i++) {\n            backgrounds[i] = []\n            for(let j = 0; j < ysize; j++) {\n                const thermNum = Math.floor(grid[i][j] / 10)\n                const north = i > 0 ? Math.floor(grid[i-1][j] / 10) : null\n                const south = i < xsize - 1 ? Math.floor(grid[i+1][j] / 10) : null\n                const west = j > 0 ? Math.floor(grid[i][j-1] / 10) : null\n                const east = j < ysize - 1 ? Math.floor(grid[i][j+1] / 10) : null\n\n                if(grid[i][j] % 10 === 1) {\n                    if(north === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadN.png)\")\n                    } else if(west === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadW.png)\")\n                    } else if(east === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadE.png)\")\n                    } else if(south === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadS.png)\")\n                    }\n                } else {\n                    if(north === thermNum && south !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipS.png)\")    \n                    } else if(south === thermNum && north !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipN.png)\")\n                    } else if(north === thermNum && south === thermNum) {\n                        backgrounds[i].push(\"url(images/themV.png)\")\n                    } else if(east === thermNum && west !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipW.png)\")    \n                    } else if(west === thermNum && east !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipE.png)\")\n                    } else if(east === thermNum && west === thermNum) {\n                        backgrounds[i].push(\"url(images/themH.png)\")\n                    }\n                }\n                \n            }\n        }\n\n        return backgrounds;\n    }\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < this.state.grid.length; i++) {\n            borders[i] = []\n            for(let j = 0; j < this.state.grid[0].length; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===this.state.x - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===this.state.y - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                cellBackgrounds={this.getBackgrounds()}\n                highlighted={this.props.highlighted} \n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                rows={this.props.rows}\n                cellBorders={this.getCellBorders()}\n                />)\n    }\n}\n\nexport default ThermometerBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass SkyscrapersBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: this.props.params.SIZE,\n            rowsums: Object.values(this.props.params.CLUES[\"1\"])\n                    .map(num => num === 0 ? null : num),\n            colsums: Object.values(this.props.params.CLUES[\"2\"])\n                    .map(num => num === 0 ? null : num),\n            endrowsums: Object.values(this.props.params.CLUES[\"3\"])\n                    .map(num => num === 0 ? null : num),\n            endcolsums: Object.values(this.props.params.CLUES[\"4\"])\n                    .map(num => num === 0 ? null : num),\n        }\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                endcolsums={this.state.endcolsums}\n                rowsums={this.state.rowsums}\n                endrowsums={this.state.endrowsums}\n\n                />)\n    }\n}\n\nexport default SkyscrapersBoard;","import React from 'react'\nimport Board from '../Board/Board'\nclass GaramBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.presetvals)\n                .map(o => Object.values(o)),\n            operations: Object.values(this.props.params.op),\n            opMap: {1: \"+\", 2: \"-\", 3: \"\\u00D7\"}\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n        const {grid} = this.state;\n\n        for(let i = 0; i < grid.length; i++) {\n            borders[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                borders[i].push(\n                    {\n                        borderTop: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderBottom: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderLeft: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderRight: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    // The positions of the operations is the same every time in garam, so we can hardcode.\n    getRightLabels() {\n        let rightLabels = []\n        const {grid, opMap, operations} = this.state\n        for(let i = 0; i < grid.length; i++) {\n            rightLabels[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                rightLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        rightLabels[0][1] = '='\n        rightLabels[0][5] = '='\n        rightLabels[1][3] = '='\n        rightLabels[3][1] = '='\n        rightLabels[3][5] = '='\n        rightLabels[5][1] = '='\n        rightLabels[5][5] = '='\n        rightLabels[8][1] = '='\n        rightLabels[8][5] = '='\n        \n        rightLabels[0][0] = opMap[operations[0]]\n        rightLabels[0][4] = opMap[operations[1]]\n        rightLabels[1][2] = opMap[operations[6]]\n        rightLabels[3][0] = opMap[operations[7]]\n        rightLabels[3][4] = opMap[operations[8]]\n        rightLabels[5][0] = opMap[operations[11]]\n        rightLabels[5][4] = opMap[operations[12]]\n        rightLabels[6][2] = opMap[operations[17]]\n        rightLabels[8][0] = opMap[operations[18]]\n        rightLabels[8][4] = opMap[operations[19]]\n        return rightLabels;\n    }\n\n    getBottomLabels() {\n        let bottomLabels = []\n        const {grid, opMap, operations} = this.state;\n\n        for(let i = 0; i < grid.length; i++) {\n            bottomLabels[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                bottomLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        bottomLabels[1][0] = \"=\"\n        bottomLabels[1][2] = \"=\"\n        bottomLabels[1][4] = \"=\"\n        bottomLabels[1][6] = \"=\"\n        bottomLabels[4][1] = \"=\"\n        bottomLabels[4][5] = \"=\"\n        bottomLabels[6][0] = \"=\"\n        bottomLabels[6][2] = \"=\"\n        bottomLabels[6][4] = \"=\"\n        bottomLabels[6][6] = \"=\"\n        \n        bottomLabels[0][0] = opMap[operations[2]]\n        bottomLabels[0][2] = opMap[operations[3]]\n        bottomLabels[0][4] = opMap[operations[4]]\n        bottomLabels[0][6] = opMap[operations[5]]\n        bottomLabels[3][1] = opMap[operations[9]]\n        bottomLabels[3][5] = opMap[operations[10]]\n        bottomLabels[5][0] = opMap[operations[13]]\n        bottomLabels[5][2] = opMap[operations[14]]\n        bottomLabels[5][4] = opMap[operations[15]]\n        bottomLabels[5][6] = opMap[operations[16]]\n\n        return bottomLabels;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                hiddenLiterals={[-2]}\n                cellBorders={this.getCellBorders()}\n                rightLabels={this.getRightLabels()}\n                bottomLabels={this.getBottomLabels()}\n                />)\n    }\n}\n\nexport default GaramBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass NonogramBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rowcounts: Object.values(this.props.params.rowcounts)\n                    .map(o => Object.values(o)),\n            colcounts: Object.values(this.props.params.colcounts)\n                .map(o => Object.values(o)),\n        }\n    }\n\n    getBackgrounds() {\n        let backgrounds = {};\n\n        \n        backgrounds[\"0\"] = \"linear-gradient(white, white)\"\n        backgrounds[\"1\"] = \"linear-gradient(black, black)\"\n        \n        \n        return backgrounds;\n    }\n\n    transpose(array) {\n        return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                literalBackgrounds={this.getBackgrounds()}\n                hiddenLiterals={[0, 1]}\n                startrows={this.transpose(this.state.colcounts)}\n                startcols={this.transpose(this.state.rowcounts)}\n                />)\n    }\n}\n\nexport default NonogramBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass SudokuBoard extends React.Component {\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                cellBorders={this.getCellBorders()}\n                literalSize={0.7}\n                />)\n    }\n}\n\nexport default SudokuBoard;","import axios from \"axios\";\n\nasync function getExamples() {\n    const response = await axios.get(\"examples\");\n    return response.data;\n}\n\nasync function getExampleData(exampleName) {\n    const response = await axios.get(`examples/${exampleName}`);\n    return response.data;\n}\n\nasync function createJob(eprimename, eprime, paramname, param, algorithm, numSteps, explainedLits, appendChoices, choice) {\n    const response = await axios.post(\"api/job\", {\n        eprimeName: eprimename,\n        eprime: eprime,\n        paramName: paramname,\n        param: param,\n        algorithm: algorithm,\n        numSteps: numSteps,\n        explainedLits: explainedLits,\n        appendChoices: appendChoices,\n        choice: choice\n    })\n    return response.data\n}\n\nasync function getJob(jobId) {\n    const response = await axios.get(`api/job/${jobId}`);\n    return response.data\n}\n\nasync function getJobOutput(jobId) {\n    const response = await axios.get(`api/job/${jobId}/output`);\n    return response.data\n}\n\n\nexport { getExamples, getExampleData, createJob, getJob, getJobOutput};\n\n","import React from 'react';\nimport { Spinner, Alert } from 'react-bootstrap';\n\nimport * as API from \"../API\";\n\nclass JobWait extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            status: \"pending\", \n            pollDelay: 1000, \n            pollCount: 0,\n            error: null}\n    }\n    componentDidMount() {\n        this.timer = setInterval(()=> this.checkStatus(), this.state.pollDelay);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.pollDelay !== this.state.pollDelay) {\n            clearInterval(this.timer)\n            this.timer = setInterval(() => this.checkStatus(), this.state.pollDelay)\n        }\n    }\n    \n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n    \n    checkStatus() {\n        API.getJob(this.props.jobId)\n            .then(res => res.status === \"finished\" && \n                API.getJobOutput(this.props.jobId)\n                    .then(output => {\n                            clearInterval(this.timer)\n                            this.props.setInput(output, this.props.mode)\n                        }).catch(error => {\n                            clearInterval(this.timer)\n                            if(error.response) {\n                                this.setState({error: error.response.data})\n                            } else {\n                                this.setState({error: error})\n                            }\n                            \n                        })) \n        this.setState({pollCount: this.state.pollCount + 1})\n        if(this.state.pollCount === 10) {\n            this.setState({pollDelay: 10000})\n        }\n    }\n    render() {\n        return (\n        <div>\n        {this.state.error !== null ? (\n            <>\n                <h4>demystify job failed</h4> \n\n                <p><b>Job ID:</b> {this.props.jobId}</p>\n                <Alert variant=\"warning\" className=\"m-4\"><b>Error message: </b>{this.state.error}</Alert>\n\n            </>\n            ) :\n            (\n            <>\n                <Spinner animation=\"border\"/>\n                <h4>demystify is running... </h4> \n                <p><b>Job ID:</b> {this.props.jobId}</p>\n                <p>If you don't want to wait here for the job to complete you can check its progress later\n                    at: <br /> <a href={window.location + \"api/job/\" + this.props.jobId}>{window.location + \"api/job/\" + this.props.jobId}</a>\n                    <br /> and then save the result when it's ready from: \n                    <br /> <a href={window.location + \"api/job/\" + this.props.jobId + \"/output\"}>{window.location + \"api/job/\" + this.props.jobId + \"/output\"}</a>\n                    </p>\n            </>\n            )\n        }\n        </div>\n        )\n    }\n}\n\nexport default JobWait;","import React from 'react';\nimport NavSwitcher from './NavSwitcher';\nimport Board from './Board/Board';\nimport ExplanationList from \"./Explanations/ExplanationList\";\n\nimport { Row, Col, Card, Button } from 'react-bootstrap';\n\nimport TentsBoard from './PuzzleBoards/TentsBoard';\nimport BinairoBoard from './PuzzleBoards/BinairoBoard';\nimport KillerBoard from './PuzzleBoards/KillerBoard';\nimport KakuroBoard from './PuzzleBoards/KakuroBoard';\nimport StarBattleBoard from './PuzzleBoards/StarBattleBoard';\nimport FutoshikiBoard from './PuzzleBoards/FutoshikiBoard';\nimport ThermometerBoard from './PuzzleBoards/ThermometerBoard';\nimport SkyscrapersBoard from './PuzzleBoards/SkyscrapersBoard';\nimport GaramBoard from './PuzzleBoards/GaramBoard';\nimport NonogramBoard from './PuzzleBoards/NonogramBoard';\nimport SudokuBoard from './PuzzleBoards/SudokuBoard';\nimport JobWait from './JobWait';\n\nimport * as API from \"../API\";\n\n/**\n * Main puzzle visualiser with a board on the left and explanations on the right.\n */\nclass PuzzleStepper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentStep: 0,\n            highlightedLiterals: -1,\n            highlightedExplanations: [],\n            currentChoice: 0,\n            selectedChoice: 0,\n            type: this.props.type,\n            params: this.props.params,\n            inputObject: this.props.inputObject,\n            continueData: this.props.continueData,\n            isWaiting: false,\n            finishedPuzzle: false\n        }\n    }\n\n    isChoicesStep() {\n        return (this.props.mode === \"manual\") && !this.state.finishedPuzzle && (this.state.currentStep === this.state.inputObject.length - 1)\n    }\n\n    /* Two-way highlighting system: mouseover an explanation and see relevant literals,\n        mouseover a literals to see relevant explanations. \n    */\n    highlightLiteral(val) {\n        this.setState((prev) => { return { highlightedLiterals: prev.highlightedLiterals === val ? -1 : val } });\n    }\n\n    highlightExplanation(val) {\n        this.setState((prev) => \n            { return { \n                highlightedExplanations:\n                    JSON.stringify(prev.highlightedExplanations)===JSON.stringify(val) ? \n                        [] : val } });\n    }\n\n    // Passed to the NavSwitcher for overall steps\n    setCurrentStep(step) {\n        this.setState({ currentStep: step, currentChoice: 0});\n    }\n\n    // Passed to the NavSwitcher for switching between alternatives.\n    setChoice(number) {\n        this.setState({currentChoice: number})\n    }\n\n    // Choose a board if we have defined one for this puzzle type.\n    chooseBoard(boardProps) {\n        switch(this.state.type) {\n            case \"tents.eprime\":\n                return <TentsBoard {...boardProps}/>\n            case \"binairo.eprime\":\n                return <BinairoBoard {...boardProps}/>\n            case \"nice_killer.eprime\":\n                return <KillerBoard {...boardProps}/>\n            case \"star-battle.eprime\":\n                return <StarBattleBoard {...boardProps}/>\n            case \"kakuro.eprime\":\n                return <KakuroBoard {...boardProps}/>\n            case \"nfutoshiki.eprime\":\n                return <FutoshikiBoard {...boardProps}/>\n            case \"thermometer.eprime\":\n                return <ThermometerBoard {...boardProps}/>\n            case \"skyscrapers.eprime\":\n                return <SkyscrapersBoard {...boardProps}/>\n            case \"garam.eprime\":\n                return <GaramBoard {...boardProps}/>\n            case \"nonogram.eprime\":\n                return <NonogramBoard {...boardProps}/>\n            case \"x-sums.eprime\":\n                return <SudokuBoard {...boardProps} />\n            case \"miracle.eprime\":\n                return <SudokuBoard {...boardProps} />\n            case \"sudoku.eprime\":\n                return <SudokuBoard {...boardProps} />\n            default:\n                return <Board {...boardProps}/>\n        }\n    }\n\n    getEndButton() {\n        if(this.isChoicesStep()) {\n            return <Button \n                        variant=\"success\" \n                        disabled={this.state.isWaiting} \n                        onClick={this.handleGetNext.bind(this)}>{\"Confirm Choice\"} </Button>\n        } else {\n            return null\n        }\n    }\n\n    appendInput(obj, mode) {\n        this.setState({\n            currentChoice: 0,\n            selectedChoice: 0,\n            currentStep: this.state.currentStep + 1,\n            continueData: obj,\n            finishedPuzzle: obj.finished,\n            inputObject: [...(this.state.inputObject.slice(0, -1)), ...obj.result.steps],\n            isWaiting: false})\n    }\n\n    async handleGetNext() {\n        const {eprimename, eprime, paramname, param, algorithm, explainedLits} = this.state.continueData;\n        const {currentChoice} = this.state;\n        const result = await API.createJob(eprimename, eprime, paramname, param, algorithm, 1, explainedLits, true, currentChoice);\n        this.setState({isWaiting: true, jobId: result.jobId})\n    }\n\n    getStepData() {\n        if(this.isChoicesStep()) {\n            return this.state.inputObject[this.state.currentStep].choices[this.state.currentChoice]\n        } else {\n            return this.state.currentChoice=== 0 ?\n            this.state.inputObject[this.state.currentStep]\n            : this.state.inputObject[this.state.currentStep].otherChoices[this.state.currentChoice - 1]\n        }\n    }\n\n    getAlternatives() {\n        if(this.isChoicesStep()) {\n            return this.state.inputObject[this.state.currentStep].choices\n        } else {\n            return this.state.inputObject[this.state.currentStep].otherChoices\n        }\n    }\n\n    handleSelectChoice() {\n        this.setState({selectedChoice: this.state.currentChoice})\n    }\n    render() {\n\n        const stepData = this.getStepData()\n\n        // Core required board props. \n        const boardProps = {\n            params: this.state.params,\n            highlight: this.highlightExplanation.bind(this),\n            key: this.state.highlightedLiterals,\n            highlighted: this.state.highlightedLiterals, \n            rows: stepData.puzzleState.matrices[0].rows\n        }\n\n\n        return (\n            <React.Fragment>\n                <NavSwitcher \n                    className=\"mt-3 p-3\" \n                    stepName={\"step\"} \n                    setCurrentStep={this.setCurrentStep.bind(this)} \n                    maxSteps={this.state.inputObject.length - 1} \n                    currentStep={this.state.currentStep}\n                    endButton={this.getEndButton()}\n                    />\n                {this.state.isWaiting ? \n                            <Row className=\"mt-4 d-flex justify-content-center align-items-center\">\n                                <Card className=\"mt-3\">\n                                    <Card.Body>\n                                        <JobWait jobId={this.state.jobId} setInput={this.appendInput.bind(this)} mode={this.state.mode}/>\n                                    </Card.Body>\n                                </Card>\n                            </Row>:\n                <Row className=\"mb-4\">\n                    {/*The main board: adjust width based on screen size */}\n                    <Col xs={12} md={8} lg={8} xl={6}>\n                        {this.chooseBoard(boardProps)} \n                    </Col>\n\n                    {/*The explanations*/}\n                    <Col>\n                        {stepData.skippedDeductions &&\n                            <Card className=\"mt-3\">\n                                <Card.Body>\n                                    <small>Skipped some obvious deductions.</small>\n                                </Card.Body>\n                            </Card>\n                        }\n\n                        <ExplanationList\n                            highlight={this.highlightLiteral.bind(this)}\n\n                            /* Only one of simpleDeductions or deductions should be defined. */\n                            simpleDeductions={stepData.simpleDeductions}\n                            deduction={stepData.deduction}\n                            \n                            highlighted={this.state.highlightedExplanations} \n                            boldBorder={this.isChoicesStep() && this.state.currentChoice === this.state.selectedChoice}\n                            /* Props for displaying alternatives */\n                            choices={this.getAlternatives()}\n                            smallestMUSSize={this.state.inputObject[this.state.currentStep].smallestMUSSize}\n                            setChoice={this.setChoice.bind(this)}\n                            currentChoice={this.state.currentChoice}\n                            extraChoice={!this.isChoicesStep()}\n                            >\n                            {this.isChoicesStep() &&\n                            <> \n                                {this.state.currentChoice !== this.state.selectedChoice ?\n                                    <Button onClick={this.handleSelectChoice.bind(this)} className=\"mt-3\" variant=\"success\">Select explanation</Button>\n                                :   <Button className=\"mt-3\" disabled variant=\"success\">Currently selected</Button>}\n                                <p className=\"mt-3\">Currently selected choice: {this.state.selectedChoice + 1}</p> </>}\n                        </ExplanationList>\n                        \n                        \n                        \n                    </Col>\n                </Row>}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PuzzleStepper;\n","import React from 'react';\n\nclass FileUploader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fileInput = React.createRef();\n    }\n\n    uploadFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            try {\n                const text = (e.target.result);\n                this.props.onUpload(text, this.fileInput.current.files[0].name);\n            } catch {\n                this.props.onError();\n            }\n        };\n        reader.readAsText(e.target.files[0])\n    }\n\n    render() {\n        return <input \n                disabled={this.props.disabled} \n                type=\"file\" \n                ref={this.fileInput} \n                onChange={(e) => this.uploadFile(e)} />\n    }\n}\n\nexport default FileUploader;","import React from 'react';\nimport { Card, Row, ListGroup, Dropdown, Alert, Spinner, Button, Form } from 'react-bootstrap'\nimport * as API from \"../API\";\nimport FileUploader from './FileUploader';\nimport JobWait from './JobWait';\n\n/**\n * Load a JSON input from the user's filesystem or preloaded examples.\n */\nclass MainMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            examples: [],\n            eprime: null,\n            eprimename: null,\n            param: null,\n            paramname: null,\n            error: \"\",\n            jobId: null,\n            isLoadingExamples: true,\n            isLoadingExampleJSON: false,\n            mode: \"default\",\n            algorithm: \"cascade\",\n            isQueueing: false,\n            isWaiting: false\n        };\n    }\n\n    componentDidMount() {\n        API.getExamples()\n            .then(res => this.setState({ examples: res },\n                () => this.setState({ isLoadingExamples: false })));\n    }\n\n    async handleGo() {\n        if (!this.state.eprime || !this.state.param) {\n            this.setError(\n                \"Please upload .eprime and .param files to run Demystify.\");\n            return;\n        }\n\n        this.setState({ isRunning: true });\n        const { eprimename, eprime, paramname, param, mode, algorithm } = this.state;\n        const numSteps = mode === \"default\" ? -1 : 0;\n\n        try {\n            const result = await API.createJob(eprimename, eprime, paramname, param, algorithm, numSteps, [], false, 0);\n            this.setState({isWaiting: true, jobId: result.jobId})\n            \n        } catch (err) {\n            this.setError(\n                \"There was a problem running Demystify on the server.\");\n            this.setState({ isRunning: false });\n        }\n    }\n\n    setError(message) {\n        this.setState({ error: message });\n    }\n\n    componentDidUpdate = () => {\n        if (this.state.isQueueing) {\n            window.onbeforeunload = () => { return true; }\n        } else {\n            window.onbeforeunload = undefined\n        }\n    }\n\n    async getExamples() {\n        const examples = await API.getExamples();\n\n        try {\n            const items = examples.map(name =>\n                <Dropdown.Item>\n                    {name}\n                </Dropdown.Item>);\n            return items;\n        } catch {\n            return (\n                <Alert className=\"m-0\" variant=\"warning\">\n                    Error fetching examples.\n                </Alert>)\n        }\n    }\n\n    async chooseExample(name) {\n        this.setState({isLoadingExampleJSON: true})\n        const example = await API.getExampleData(name);\n        this.props.setInput({result: example}, \"default\");\n    }\n\n    handleModeChange(e) {\n        this.setState({\n            mode: e.target.value\n        });\n    }\n\n    handleOptionChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            \n            <div className=\"d-flex flex-column align-items-center\">\n                <h1 className=\"mt-3\">Demystify Visualiser</h1>\n                <img className=\"mt-3\" style={{ width: \"100px\" }} alt=\"demystify logo\" src=\"favicon.ico\" />\n                <Card as={Row} className=\"mt-3 pt-3 w-75\">\n                    {this.state.isWaiting ? <JobWait jobId={this.state.jobId} setInput={this.props.setInput} mode={this.state.mode}/> :\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <Row>\n                                {/* Basic file selection. */}\n                                <b className=\"mx-4\">  Load Demystify output from JSON file:</b>\n                                <FileUploader\n                                    disabled={this.state.isQueueing || this.state.isLoadingExampleJSON}\n                                    onUpload={(text) => this.props.setInput({result: JSON.parse(text)}, \"default\")}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a JSON file produced by Demystify.\")}\n                                />\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <b className=\"mx-4 pt-2\">View a pre-generated example:</b>\n                                <Dropdown onSelect={(e) => this.chooseExample(e)}>\n                                    <Dropdown.Toggle disabled={this.state.isQueueing} variant=\"success\" id=\"dropdown-basic\">\n                                        Examples\n                                    </Dropdown.Toggle>\n\n\n                                    <Dropdown.Menu>\n                                        {this.state.isLoadingExamples ?\n                                            <div className=\"d-flex justify-content-center\">\n                                                <Spinner animation=\"border\" />\n                                            </div>\n                                            :\n                                            this.state.examples.map((name) =>\n                                                <Dropdown.Item key={name} eventKey={name} onClick={() => this.chooseExample(name)}>\n                                                    {name}\n                                                </Dropdown.Item>)}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                                {this.state.isLoadingExampleJSON && <Spinner className=\"ml-4\" animation=\"border\"/>}\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                            <Row>\n                                <b className=\"mx-4 mb-4\">Run Demystify live:</b>\n                            </Row>\n                            <Row>\n                                <p className=\"mx-4\">Puzzle description (.eprime): </p>\n                                <FileUploader\n                                    disabled={this.state.isQueueing || this.state.isLoadingExampleJSON}\n                                    onUpload={(text, name) => this.setState({ eprime: text, eprimename: name })}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a valid .eprime file.\")}\n                                />\n                            </Row>\n\n                            <Row>\n                                <p className=\"mx-4\">Puzzle instance (.param): </p>\n                                <FileUploader\n                                    disabled={this.state.isQueueing || this.state.isLoadingExampleJSON}\n                                    onUpload={(text, name) => this.setState({ param: text, paramname: name })}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a valid .param file.\")}\n                                />\n                            </Row>\n                            <Row>\n                                <Form inline className=\"mx-4 mb-3\">\n                                            <Form.Label className=\"mr-4\">Mode: </Form.Label>\n                                            <Form.Check className=\"mr-4\"\n                                                type=\"radio\"\n                                                name=\"mode\"\n                                                value=\"default\"\n                                                checked={this.state.mode === \"default\"}\n                                                onChange={this.handleModeChange.bind(this)}\n                                                label=\"Use default MUS choices\"\n                                            />\n\n                                            <Form.Check\n                                                type='radio'\n                                                name=\"mode\"\n                                                value=\"manual\"\n                                                checked={this.state.mode === \"manual\"}\n                                                onChange={this.handleModeChange.bind(this)}\n                                                label=\"Choose MUSes manually\"\n                                            />\n                                </Form>\n                            </Row>\n                            <Row>\n                                <Form inline className=\"mx-4 mb-3\">\n                                            <Form.Label className=\"mr-4\">MUS algorithm: </Form.Label>\n                                            <Form.Check className=\"mr-4\"\n                                                type=\"radio\"\n                                                name=\"algorithm\"\n                                                value=\"cascade\"\n                                                checked={this.state.algorithm === \"cascade\"}\n                                                onChange={this.handleOptionChange.bind(this)}\n                                                label=\"Cascade\"\n                                            />\n\n                                            <Form.Check\n                                                type='radio'\n                                                name=\"algorithm\"\n                                                value=\"forqes\"\n                                                checked={this.state.algorithm === \"forqes\"}\n                                                onChange={this.handleOptionChange.bind(this)}\n                                                label=\"FORQES\"\n                                            />\n                                </Form>\n                            </Row>\n                            <Row>\n                                <Button\n                                    disabled={this.state.isQueueing || this.state.isLoadingExampleJSON}\n                                    className=\"mx-4\"\n                                    variant=\"success\"\n                                    onClick={this.handleGo.bind(this)}>\n                                    Go\n                                </Button>\n                                {this.state.isQueueing &&\n                                    <React.Fragment>\n                                        <Spinner animation=\"border\" />\n                                        <p className=\"ml-4\">Setting up Demystify job...</p>\n                                    </React.Fragment>\n\n                                }\n                            </Row>\n\n                        </ListGroup.Item>\n                    </ListGroup> }\n                </Card>\n                {this.state.error.length > 0 &&\n                    <Alert variant=\"warning\" className=\"mt-3 p-4 w-75 text-center\">\n                        {this.state.error}\n                    </Alert>}\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import React from 'react';\n\nimport { Container} from 'react-bootstrap';\nimport PuzzleStepper from './PuzzleStepper';\n\nimport MainMenu from './MainMenu';\n\n/**\n * Currently the main content component for this application.\n */\nclass DemystifyVisualiser extends React.Component {\n  state = {\n    inputObject: [],\n    type: \"\",\n    params: {},\n    error: false,\n    mode: \"default\",\n    continueData: null\n  }\n  \n  // Load the steps, the type of puzzle, and the params (configuration) of the puzzle\n  setJSONInput(obj, mode) {\n    const result = obj.result;\n\n    this.setState({ continueData: obj, inputObject: result.steps, type: result.name, params: result.params, mode: mode},\n      () => !(this.state.inputObject && this.state.type && this.state.params)  \n      && this.setError()) \n    \n    // If we already finished the puzzle, switch to non-interactive\n    obj.finished && this.setState({mode: \"default\"})\n  }\n\n\n  // Avoid invalid JSON\n  setError() {\n    this.setState({error: true});\n  }\n\n  conponentDidUpdate(prevProps, prevState) {\n    if(prevState.error) this.setState({error: false});\n  }\n\n  render = () => {\n    return (\n      <Container fluid style={{textAlign: \"center\"}}>\n        \n        {/*If the puzzle has not been correctly loaded, display the main menu*/\n          (this.state.inputObject.length === 0 || this.state.error) ?\n            <MainMenu setInput={this.setJSONInput.bind(this)} />\n          :\n          /*Otherwise display the main puzzle visualiser*/\n            <PuzzleStepper\n              inputObject={this.state.inputObject}\n              continueData={this.state.continueData}\n              type={this.state.type}\n              params={this.state.params} \n              mode={this.state.mode} />\n        }\n      </Container>\n    )\n  }\n}\n\nexport default DemystifyVisualiser\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DemystifyVisualiser from './components/DemystifyVisualiser';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DemystifyVisualiser/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}