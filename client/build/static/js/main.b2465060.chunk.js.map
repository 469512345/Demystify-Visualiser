{"version":3,"sources":["components/NavSwitcher.jsx","components/Board/Literal.jsx","components/Board/SquareCol.jsx","components/Board/SquareRow.jsx","components/Board/Cell.jsx","components/Board/Board.jsx","components/Explanations/Explanation.jsx","components/Explanations/ExplanationList.jsx","components/PuzzleBoards/TentsBoard.jsx","components/PuzzleBoards/BinairoBoard.jsx","components/PuzzleBoards/KillerBoard.jsx","components/PuzzleBoards/KakuroBoard.jsx","components/PuzzleBoards/StarBattleBoard.jsx","components/PuzzleBoards/FutoshikiBoard.jsx","components/PuzzleBoards/ThermometerBoard.jsx","components/PuzzleBoards/SkyscrapersBoard.jsx","components/PuzzleBoards/GaramBoard.jsx","components/PuzzleBoards/NonogramBoard.jsx","components/PuzzleBoards/SudokuBoard.jsx","components/PuzzleStepper.jsx","API.js","components/FileUploader.jsx","components/JobWait.jsx","components/MainMenu.jsx","components/DemystifyViewer.jsx","reportWebVitals.js","index.js"],"names":["NavSwitcher","state","currentStep","props","newValue","this","maxSteps","setState","setCurrentStep","prevProps","Card","className","Form","inline","onSubmit","e","preventDefault","Button","variant","onClick","lastStep","bind","stepName","Group","Label","nextStep","React","Component","Literal","highlighted","prev","highlightExplanation","value","status","Col","style","color","textDecoration","fontWeight","fontStyle","onMouseEnter","toggleHighlight","onMouseLeave","SquareCol","borders","border","marginBottom","marginLeft","margin","background1","background2","background","length","backgroundImage","display","justifyContent","alignItems","backgroundSize","cornerNumber","position","backgroundColor","borderRadius","minWidth","fontSize","paddingRight","paddingLeft","zIndex","rightLabel","top","right","bottomLabel","bottom","innerBorders","padding","width","children","paddingBottom","SquareRow","Row","Cell","cellRows","cellContent","cellValues","exp","highlight","highlightBackground","literalBackgrounds","cellBackground","some","row","explanations","includes","toString","isSingleton","singletonValue","getSingletonValue","scale","literalSize","hiddenLiterals","cellBorders","cellInnerBorders","cellMargin","chooseBackground","size","isHidden","getFontSize","Container","fluid","map","i","literal","Board","arr","column","rows","cellBackgrounds","cornerNumbers","rightLabels","bottomLabels","rowsums","endrowsums","colsums","endcolsums","startrows","startcols","xs","col","cells","cell","val","j","sum","getIndex","Explanation","itemStyle","decision","reason","index","ListGroup","Item","deHighlight","ExplanationList","simpleDeductions","deduction","otherChoices","smallestMUSSize","Fragment","Accordion","defaultActiveKey","Header","Toggle","as","eventKey","Collapse","maxHeight","overflowY","Body","setAlternative","currentAlternative","TentsBoard","x","params","y","Object","values","treecount","backgrounds","push","borderTop","borderBottom","borderLeft","borderRight","getBackgrounds","getCellBorders","key","BinairoBoard","KillerBoard","grid","o","hints","currentHint","left","getCellInnerBorders","getCornerNumbers","KakuroBoard","x_max","y_max","horzsums","vertsums","blanks","bottomColor","topColor","getDiagonalGradient","extraStyle","blocks","gridSize","FutoshikiBoard","lessThans","lt","SIZE","lessThan","i1","i2","j1","j2","getRightLabels","getBottomLabels","ThermometerBoard","therms","xsize","ysize","thermNum","Math","floor","north","south","west","east","SkyscrapersBoard","CLUES","num","GaramBoard","presetvals","operations","op","opMap","1","2","3","NonogramBoard","rowcounts","colcounts","array","_","colIndex","transpose","SudokuBoard","PuzzleStepper","highlightedLiterals","highlightedExplanations","type","inputObject","JSON","stringify","step","number","boardProps","StarBattleBoard","stepData","puzzleState","matrices","md","lg","xl","chooseBoard","skippedDeductions","highlightLiteral","getExamples","a","axios","get","response","data","getExampleData","exampleName","createJob","eprimename","eprime","paramname","param","post","eprimeName","paramName","jobId","FileUploader","uploadFile","reader","FileReader","onload","text","target","result","onUpload","fileInput","current","files","name","onError","readAsText","createRef","disabled","ref","onChange","JobWait","pollDelay","pollCount","timer","setInterval","checkStatus","prevState","clearInterval","API","then","res","output","setInput","Spinner","animation","href","window","location","MainMenu","componentDidUpdate","isQueueing","onbeforeunload","undefined","examples","error","isLoadingExamples","liveMode","isWaiting","setError","isRunning","message","items","Dropdown","Alert","example","alt","src","parse","onSelect","chooseExample","id","Menu","Check","checked","handleModeChange","label","handleGo","DemystifyViewer","render","textAlign","setJSONInput","obj","steps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2465060.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\n\n/**\n * A navigation bar to advance or deadvance steps.\n */\nclass NavSwitcher extends React.Component {\n    state = {\n        currentStep: this.props.currentStep,\n    }\n\n    // Advance\n    nextStep() {\n        const newValue = this.state.currentStep + 1;\n        if (newValue <= this.props.maxSteps) {\n            this.setState({ currentStep: newValue });\n            this.props.setCurrentStep(newValue);\n        }\n    }\n\n    // Deadvance\n    lastStep() {\n        const newValue = this.state.currentStep - 1;\n        if (newValue >= 0) {\n            this.setState({ currentStep: newValue });\n            this.props.setCurrentStep(newValue);\n        }\n    }\n\n    // Ensure current step is kept up to date.\n    componentDidUpdate(prevProps) {\n        if (prevProps.currentStep !== this.props.currentStep) {\n            this.setState({ currentStep: this.props.currentStep });\n        }\n    }\n\n    render() {\n        return (\n            <Card className={this.props.className}>\n\n                <Form inline onSubmit={e => e.preventDefault()} className=\"d-flex justify-content-between\">\n                    <Button variant=\"primary\" onClick={this.lastStep.bind(this)}>\n                        Last {this.props.stepName}\n                    </Button>\n\n                    {/* Steps are indexed from 0 in JSON but display starting from 1 to the user. */}\n                    <Form.Group>\n                        <Form.Label className=\"w-70 mr-2\">Current {this.props.stepName}:</Form.Label>\n                        <Form.Label className=\"w-70 mr-2\">{this.state.currentStep + 1}</Form.Label>\n                    </Form.Group>\n\n                    <Button variant=\"primary\" onClick={this.nextStep.bind(this)}>\n                        Next {this.props.stepName}\n                    </Button>\n\n                </Form>\n\n            </Card>\n        )\n    }\n}\n\nexport default NavSwitcher;","import React from 'react';\nimport { Col } from 'react-bootstrap';\n\n/**\n * A small \"possible\" value to display in the grid within each cell.\n * Style indicates in what way it is involved in the current step.\n */\nclass Literal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted\n        }\n    }\n\n    // Highlight/Unhighlight this literal and corresponding explanation\n    toggleHighlight() {\n        this.setState((prev) => { return {highlighted: !prev.highlighted }});\n        this.props.highlightExplanation();\n    }\n\n    // Check whether this literal should be highlighted.\n    componentDidUpdate(prevProps) {\n        if(prevProps.highlighted !== this.props.highlighted) {\n            this.setState({highlighted: this.props.highlighted});\n        }\n    }\n\n    render() {\n        const { value, status } = this.props;\n        return <Col className=\"m-0 p-0\" style={{\n            // Styling dependent on literal status.\n            color:  (status === \"involved\") ? \"blue\" :\n                    (status === \"negative\") ? \"red\" :\n                    (status === \"positive\") ? \"green\" : \"black\",\n            textDecoration:\n                (status === \"negative\") ? \"line-through\" : \"none\",\n            fontWeight:\n                (status === \"positive\") ? \"bolder\" : \"normal\",\n            fontStyle:\n                (status === \"involved\") ? \"italic\" : \"normal\",\n            //backgroundColor: this.state.highlighted ? \"cornsilk\" : null\n        }}\n            onMouseEnter={this.toggleHighlight.bind(this)} \n            onMouseLeave={this.toggleHighlight.bind(this)}\n        >{value}\n        </Col>\n    }\n\n}\n\nexport default Literal;","import React from 'react';\nimport {Col} from 'react-bootstrap';\n\n/**\n * A Square cell container, with optional extra styling.\n */\nclass SquareCol extends React.Component {\n    \n    render() {\n        const borders = this.props.borders ? this.props.borders :\n        {\n            border: \"2px solid lightgray\",\n            marginBottom: \"-2px\", // Deal with \"doubled\" borders.\n            marginLeft: \"-2px\"\n        }\n\n        const margin = this.props.margin ? this.props.margin : {}\n        \n        let background1 = null\n        let background2 = null\n\n        if (this.props.background) {\n            if (this.props.background.length > 1) {\n                background1 = this.props.background[0]\n                background2 = this.props.background[1]\n            } else {\n                background1 = this.props.background[0]\n            }\n        } else {\n            background1 = this.props.background\n        }\n\n        return (\n            <Col className=\"m-0 p-0\" >\n                <div\n                    style={{\n                        backgroundImage: background2\n                    }}\n                >\n                <div\n                    style={{\n                        ...borders,\n                        ...margin,\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                        backgroundImage: background1,\n                        backgroundSize:\"100% 100%\",\n                    }}\n                >   \n                    { // Small optional number to overlay on the cell.\n                    this.props.cornerNumber && <div style={{\n                        position: \"absolute\",\n                        fontWeight: \"bolder\",\n                        color: \"white\",\n                        backgroundColor: \"#0275d8\",\n                        borderRadius: \"10px\",\n                        minWidth: \"1vw\",\n                        fontSize: \"0.8vw\",\n                        paddingRight: \"1px\",\n                        paddingLeft: \"1px\",\n                        zIndex: \"2\",\n                        ...this.props.cornerNumber.style,\n                    }}>\n                        {this.props.cornerNumber.value}\n                    </div>}\n\n                    { // Optional label between this cell and next on the right.\n                    this.props.rightLabel && <div style={{\n                        position: \"absolute\",\n                        top: \"35%\",\n                        right: \"-5%\",\n                        fontSize: \"2vw\",\n                        zIndex: \"2\",\n                    }}>\n                        {this.props.rightLabel}\n                    </div>}\n\n                    { // Optional label between this cell and the next below.\n                    this.props.bottomLabel && <div style={{\n                        position: \"absolute\",\n                        bottom: \"-15%\",\n                        right: \"42%\",\n                        fontSize: \"2vw\"\n                    }}>\n                        {this.props.bottomLabel}\n                    </div>}\n\n                    <div style={{\n                        ...this.props.innerBorders,\n                        padding: \"0px\",\n                        width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}>\n                        {this.props.children /* Main cell content */} \n                        \n                        {/*This div ensure the cell is always square\n                            CSS trick: https://stackoverflow.com/a/28985475/12309539*/}\n                        <div style={{\n                        display: \"block\",\n                        paddingBottom: \"100%\"\n                        }}></div>\n                    </div>\n                    \n                    \n                </div>\n                </div>\n            </Col >\n        )\n    }\n}\n\nexport default SquareCol;","import React from 'react';\nimport {Row} from 'react-bootstrap';\n\n/**\n * Saves typing out the bootstrap class name multiple times.\n */\nclass SquareRow extends React.Component {\n    render() {\n        return (\n            <Row \n                style={this.props.style}\n                className=\"p-0 m-0 d-flex flex-direction-row align-items-center justify-content-center\">\n                {this.props.children}\n            </Row>\n        );\n    }\n}\n\nexport default SquareRow;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport Literal from './Literal';\nimport SquareCol from './SquareCol';\nimport SquareRow from './SquareRow';\n\n/**\n * Cell component, where a cell is itself a grid of possible values.\n * (1 x 1) grid if the value becomes or is known.\n */\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted,\n        }\n    }\n\n    // Whether the cell grid is 1x1 i.e. the value is known.\n    isSingleton() {\n        const cellRows = this.props.cellContent.cellRows;\n\n        return cellRows.length === 1 &&\n                cellRows[0].cellValues.length === 1\n    }\n\n    // Get the first value of the cell grid.\n    getSingletonValue() {\n        const cellRows = this.props.cellContent.cellRows;\n        return cellRows[0].cellValues[0].value\n    }\n\n    // Check whether the cell should be highlighted\n    componentDidUpdate(prevProps) {\n        if (prevProps.highlighted !== this.props.highlighted) {\n            this.setState({ highlighted: this.props.highlighted });\n        }\n    }\n\n    // Call the parent highlight function\n    highlight(exp) {\n        this.props.highlight(exp);\n    }\n\n    /* Choose the cell background, either by reading a mapping for a singleton,\n        or taking the indexed cellBackground. */\n    chooseBackground() {\n\n        const { cellContent, literalBackgrounds, cellBackground } = this.props;\n        const { highlighted } = this.state;\n        let highlightBackground\n\n        if (cellContent.cellRows.some(\n            row => row.cellValues.some(\n                value => value.explanations.includes(\n                    highlighted.toString())))) {\n            highlightBackground = \"linear-gradient(cornsilk, cornsilk)\"\n        } else {\n            highlightBackground = \"\"\n        }\n\n        const isSingleton = this.isSingleton();\n        const singletonValue = this.getSingletonValue();\n\n        if (literalBackgrounds && isSingleton) {\n            return [literalBackgrounds[singletonValue.toString()], highlightBackground]\n        } else if (cellBackground) {\n            return [cellBackground, highlightBackground]\n        } else {\n            return [highlightBackground];\n        }\n    }\n\n    /* Known cells should be 3 times larger. */\n    getFontSize(scale) {\n        const { literalSize } = this.props;\n        if (literalSize) {\n            return (literalSize * scale).toString() + \"vw\"\n        } else {\n            return scale.toString() + \"vw\"\n        }\n    }\n\n    /* Check if a singleton value should be hidden */\n    isHidden(value) {\n        const { hiddenLiterals } = this.props;\n        return hiddenLiterals && hiddenLiterals.includes(value);\n    }\n\n    render() {\n        const {\n            cellContent,\n            cellBorders,\n            cellInnerBorders,\n            cellMargin,\n            cornerNumber,\n            rightLabel,\n            bottomLabel,\n            literalSize } = this.props;\n\n        const {highlighted} = this.state;\n\n        const isSingleton = this.isSingleton();\n        const singletonValue = this.getSingletonValue();\n\n        return (\n            <SquareCol\n                background={this.chooseBackground()}\n                borders={cellBorders}\n                innerBorders={cellInnerBorders}\n                margin={cellMargin}\n                size={literalSize}\n                cornerNumber={cornerNumber}\n                rightLabel={rightLabel}\n                bottomLabel={bottomLabel}>\n\n                {isSingleton ?\n                    // Display a single value if it is known and not hidden.\n                    (\n                        (!this.isHidden(singletonValue)) &&\n                        <h1 style={{ fontSize: this.getFontSize(2) }}>\n                            {singletonValue}\n                        </h1>\n                    ) :\n                    // Otherwise display a grid of possibilities\n                    <Container fluid className=\"p-0 align-items-center\">\n                        {cellContent.cellRows.map((row, i) =>\n                            <SquareRow key={i} style={{ fontSize: this.getFontSize(1) }}>\n                                {row.cellValues.map((literal, i) =>\n                                    // Possibilities are positive/negative literals.\n                                    <Literal\n                                        key={i}\n                                        value={literal.value}\n                                        status={literal.status} // positive / negative\n                                        highlighted={literal.explanations.includes(highlighted.toString())}\n                                        highlightExplanation={() => this.highlight(literal.explanations)}\n                                    />\n                                )}\n                            </SquareRow>\n                        )}\n                    </Container>\n                }\n            </SquareCol>\n        )\n    }\n}\n\nexport default Cell;","import React from 'react';\nimport { Card, Container, Col } from 'react-bootstrap'\nimport Cell from './Cell';\nimport SquareCol from './SquareCol';\nimport SquareRow from './SquareRow';\n\n/**\n * Generic puzzle board component. \n */\nclass Board extends React.Component {\n\n    // Return item at index, if the array prop is defined. \n    getIndex(arr, row, column) {\n        return arr ? arr[row][column] : null;\n    }\n\n    render() {\n        const {\n            // Required Props \n            highlighted, \n            highlight,\n            rows,\n\n            //Optional Props, for custom styling (see README)\n            literalBackgrounds,\n            cellBorders,\n            cellInnerBorders,\n            cellBackgrounds,\n            cellMargin,\n            literalSize,\n            cornerNumbers,\n            rightLabels,\n            bottomLabels,\n            hiddenLiterals,\n            rowsums,\n            endrowsums,\n            colsums,\n            endcolsums,\n            startrows,\n            startcols,\n      \n        } = this.props;\n        \n        return (\n            <Card className=\"mt-3 p-5\">\n                <Container fluid style={{minWidth: \"400px\", padding: \"0px\"}}>\n                    {/*'Thin' row to display column indices.*/}\n                    <SquareRow>\n                        <Col xs={1} className=\"m-0 p-0\" />\n                        {startcols && startcols.map(col =>\n                                <Col className=\"m-0 p-0\"/>)}\n                        {rowsums && <Col className=\"m-0 p-0\" /> /* small corner cell*/}\n                        {rows[0].cells.map((cell, i) =>\n                            <Col key={i} className=\"m-0 p-0\">\n                                <small className=\"text-muted\">{i + 1}</small>\n                            </Col>)}\n                        {endrowsums && <Col className=\"m-0 p-0\" /> /* small corner cell*/}\n                    </SquareRow>\n                    \n                    {startrows && startrows.map(row =>\n                        // Extra rows for e.g. nonogram\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            {startcols && startcols.map(col =>\n                                <SquareCol/>)}\n                            {row.map((val, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {val}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>)}\n\n                    {colsums &&\n                        // Extra row for column sums if necessary.\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            <SquareCol />\n                            {colsums.map((sum, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {sum}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>}\n\n                    {rows.map((row, i) =>\n                        <SquareRow key={i}>\n                            {/* 'Thin' column for column indices */}\n                            <Col xs={1} key={i} className=\"m-0 p-0\">\n                                <small className=\"text-muted\">{i + 1}</small>\n                            </Col>\n\n                            {startcols && startcols.map(col =>\n                                // Extra column for row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {col[i]}\n                                    </h3>\n                                </SquareCol>)}\n\n                            {rowsums &&\n                                // Extra column for row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {rowsums[i]}\n                                    </h3>\n                                </SquareCol>}\n\n                            {row.cells.map((cell, j) =>\n                                    // Main rows of puzzle\n                                    <Cell\n                                        cellContent={cell} \n                                        row={i} \n                                        column={j} \n\n                                        // Whether this cell is currently highlighted\n                                        highlighted={highlighted} \n                                        \n                                        /* Function to highlight explanation when this cell\n                                            is moused over */\n                                        highlight={highlight}\n                                        \n                                        // Styling \n                                        cellBorders={this.getIndex(cellBorders, i, j)}\n                                        cellInnerBorders={this.getIndex(cellInnerBorders, i, j)}\n                                        cellBackground={this.getIndex(cellBackgrounds, i, j)}\n                                        cornerNumber={this.getIndex(cornerNumbers, i, j)}\n                                        rightLabel={this.getIndex(rightLabels, i, j)}\n                                        bottomLabel={this.getIndex(bottomLabels, i, j)}\n                                        cellMargin={cellMargin}\n                                        literalBackgrounds={literalBackgrounds}\n                                        literalSize={literalSize}\n                                        hiddenLiterals={hiddenLiterals}\n                                        />      \n                                )}\n                            {endrowsums &&\n                                // Extra column for end row sums if ncessary.\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {endrowsums[i]}\n                                    </h3>\n                                </SquareCol>}\n                        </SquareRow>)}\n\n                        {endcolsums &&\n                        // Extra row for end column sums if necessary.\n                        <SquareRow>\n                            <Col xs={1} className=\"m-0 p-0\" />\n                            <SquareCol />\n                            {endcolsums.map((sum, j) =>\n                                <SquareCol>\n                                    <h3 style={{ fontSize: \"2vw\", color: \"gray\" }}>\n                                        {sum}\n                                    </h3>\n                                </SquareCol>)}\n                            {endrowsums && <SquareCol />}\n                        </SquareRow>}\n                </Container>\n            </Card>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\n/**\n * A single explanation/reason that can be highlighted on mouse over.\n */\nclass Explanation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            highlighted: this.props.highlighted\n        }\n    }\n\n    highlight() {\n        this.setState({highlighted: true});\n        this.props.highlight();\n    }\n\n    deHighlight() { //...unhighlight? dishighlight?\n        this.setState({highlighted: false});\n        this.props.highlight();\n    }\n\n    componentDidUpdate(prevProps) {\n        if(prevProps.highlighted !== this.props.highlighted) { \n            this.setState({highlighted: this.props.highlighted});\n        }\n    }\n\n    render() {\n        const itemStyle =\n            this.state.highlighted ?\n                { backgroundColor: \"cornsilk\" } : null\n                \n        const {decision, reason, index} = this.props\n\n        return <ListGroup.Item\n            style={itemStyle}\n            key={index}\n            onMouseEnter={this.highlight.bind(this)}\n            onMouseLeave={this.deHighlight.bind(this)}>\n            {decision}\n            <br />\n            {reason}\n        </ListGroup.Item>\n    }\n}\n\nexport default Explanation;","import React from 'react';\nimport { Accordion, Card, Button, ListGroup } from 'react-bootstrap';\nimport NavSwitcher from '../NavSwitcher';\nimport Explanation from './Explanation';\n\n/**\n * A sidebar that displays the deductions made on a given step, along with the explanations for that deduction.\n */\nclass ExplanationList extends React.Component {\n\n    render() {\n        const { simpleDeductions, deduction, otherChoices, smallestMUSSize} = this.props;\n        return (\n            <React.Fragment>\n                <Card className=\"mt-3\" >\n\n                    { /*For simple deductions (just one reason), display a collapsible list */\n                        simpleDeductions ?\n                        <Accordion defaultActiveKey=\"1\">\n                            <Card.Header>\n                                <h5>Made {simpleDeductions.length} simple deductions.</h5>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                    Show/Hide\n                            </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <ListGroup style={{ maxHeight: \"60vh\", overflowY: \"scroll\" }}>\n                                    {\n                                        simpleDeductions.map((deduction, i) => {\n\n                                            return <Explanation\n                                                highlighted={this.props.highlighted.includes(i.toString())}\n                                                decision={deduction.decision}\n                                                reason={deduction.reason}\n                                                index={i}\n                                                key={i}\n                                                highlight={() => this.props.highlight(i)} />\n                                        })\n                                    }\n                                </ListGroup>\n                            </Accordion.Collapse>\n                        </Accordion>\n                        : deduction &&\n                        /* Otherwise we have an \"interesting\" deductions, \n                            so display the deductions with a list of reasons */\n                        <React.Fragment>\n                            <Card.Header>\n                                <h5>Made the following deduction:</h5>\n\n                            </Card.Header>\n                            <Card.Body>\n                                <div className=\"mb-3\">\n                                    <b >{deduction.decision}</b>\n                                </div>\n\n                                <ListGroup style={{ maxHeight: \"75vh\", overflowY: \"scroll\" }}>\n                                    {deduction.reason.map((reason, i) =>\n                                        <Explanation\n                                            highlighted={this.props.highlighted.includes(i.toString())}\n                                            reason={reason}\n                                            index={i}\n                                            key={i}\n                                            highlight={() => this.props.highlight(i)} />)}\n                                </ListGroup>\n                            </Card.Body>\n                        </React.Fragment>\n                    }\n                </Card>\n\n                {/*If there are other choices, display a NavSwitcher to step through the alternatives */\n                otherChoices && \n                    <Card className=\"mt-3\">\n                    <Card.Header>\n                        <b>Found {otherChoices.length + 1} choices in total for this step:</b>\n                    </Card.Header>\n                    <Card.Body>\n                        <div className=\"mb-3\">\n                            See the alternative deductions with MUS size {smallestMUSSize}:\n                            \n                        </div>\n                        <NavSwitcher \n                            stepName={\"Alt\"} \n                            className=\"p-3\" \n                            setCurrentStep={this.props.setAlternative} \n                            maxSteps={otherChoices.length}\n                            currentStep={this.props.currentAlternative}\n                            />\n                        <div>\n                            <small className=\"text-muted\">\n                                (Note: different MUSs may result in deductions that look identical)\n                            </small>\n                        </div>\n\n                    </Card.Body>\n\n                </Card>}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ExplanationList;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass TentsBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.params.x,\n            y: this.props.params.y,\n            colsums: Object.values(this.props.params.colsums),\n            rowsums: Object.values(this.props.params.rowsums),\n            treecount: this.props.params.treecount\n        }\n    }\n\n    getBackgrounds() {\n        let backgrounds = {};\n\n        for(let i = 1; i <= this.state.treecount; i++) {\n            backgrounds[\"-\" + i.toString()] = \"url(images/tree.png)\"\n            backgrounds[i.toString()] = \"url(images/tent.png)\"\n        }\n        \n        return backgrounds;\n    }\n\n    \n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < this.state.x; i++) {\n            borders[i] = []\n            for(let j = 0; j < this.state.y; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===this.state.x - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===this.state.y - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n    \n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                literalBackgrounds={this.getBackgrounds()}\n                cellBorders={this.getCellBorders()}\n                />)\n    }\n}\n\nexport default TentsBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass BinairoBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                />)\n    }\n}\n\nexport default BinairoBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KillerBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.grid)\n                .map(o => Object.values(o)),\n            hints: Object.values(this.props.params.hints)\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getCellInnerBorders() {\n        let borders = []\n        const {grid} = this.state;\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: \n                            i===0 || grid[i-1][j] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderBottom: i===8 || grid[i+1][j] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderLeft: j===0 || grid[i][j-1] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        borderRight: j===8 || grid[i][j+1] !== grid[i][j] ? \"2px dashed black\" : \"2px dashed white\",\n                        margin: \"3px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getCornerNumbers() {\n        let cornerNumbers = []\n        const {hints, grid} = this.state;\n        let currentHint = 0;\n\n        for(let i = 0; i < 9; i++) {\n            cornerNumbers[i] = []\n            for(let j = 0; j < 9; j++) {\n                if(grid[i][j] === currentHint + 1) {\n                    cornerNumbers[i].push({value: hints[currentHint], style: {top: \"0%\", left: \"0%\"}})\n                    currentHint++\n                } else \n                    cornerNumbers[i].push({value: null, style: {top: \"0%\", left: \"0%\"}})\n            }\n        }\n        return cornerNumbers\n    }\n    \n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                cellBorders={this.getCellBorders()}\n                cellInnerBorders={this.getCellInnerBorders()}\n                literalSize={0.7}\n                cornerNumbers={this.getCornerNumbers()}\n                />)\n    }\n}\n\nexport default KillerBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KakuroBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            x: this.props.params.x_max,\n            y: this.props.params.y_max,\n            rowsums: Object.values(this.props.params.horzsums).map(\n                o => Object.values(o)),\n            colsums: Object.values(this.props.params.vertsums).map(\n                o => Object.values(o)),\n            blanks:  Object.values(this.props.params.blanks).map(\n                o => Object.values(o))\n        }\n    }\n\n    getDiagonalGradient(bottomColor, topColor) {\n        return `linear-gradient(to bottom left, ${bottomColor}, ${bottomColor} 49%, lightgray 49%, lightgray 51%, ${topColor} 51%, ${topColor})`\n    }\n   \n    getBackgrounds() {\n        const {rowsums, colsums, blanks} = this.state;\n        let backgrounds = []\n        for(let i = 0; i < this.state.x; i++) {\n            backgrounds[i] = []\n            for(let j = 0; j < this.state.y; j++) {\n                if(rowsums[i][j]!==0) {\n                    if(colsums[i][j]!==0) {\n                        backgrounds[i].push(this.getDiagonalGradient(\"white\", \"white\"))\n                    } else {\n                        backgrounds[i].push(this.getDiagonalGradient(\"white\", \"lightblue\"))\n                    }\n                } else {\n                    if(colsums[i][j]!==0) {\n                        backgrounds[i].push(this.getDiagonalGradient(\"lightblue\", \"white\"))\n                    } else {\n                        if(blanks[i][j]===0) {\n                            backgrounds[i].push(\"linear-gradient(lightblue, lightblue)\")\n                        } else {\n                            backgrounds[i].push(\"none\")\n                        }\n                    }\n\n                }\n                \n            }\n        }\n        /*return borders;\n            {\"0\": \"linear-gradient(to bottom left, white, white 49%, lightgray 49%, lightgray 51%, lightblue 51%, lightblue)\"}*/\n        \n\n        return backgrounds;\n    }\n\n    getCornerNumbers() {\n        let cornerNumbers = []\n        const {rowsums, colsums, x, y} = this.state;\n        const extraStyle = {\n            fontWeight: \"bolder\",\n            color: \"gray\",\n            backgroundColor: \"none\",\n            fontSize: \"1.4vw\"}\n\n        for(let i = 0; i < x; i++) {\n            cornerNumbers[i] = []\n            for(let j = 0; j < y; j++) {\n                if(rowsums[i][j] !== 0) {\n                    cornerNumbers[i].push({value: rowsums[i][j], style: {top: \"20%\", right: \"20%\", ...extraStyle}})\n                } else if(i > 0 && colsums[i-1][j] !== 0) {\n                    cornerNumbers[i].push({value: colsums[i-1][j], style: {top: \"-30%\", left: \"20%\", ...extraStyle}})\n                } else \n                    cornerNumbers[i].push({value: null,  style: {top: \"-30%\", left: \"20%\", ...extraStyle}})\n\n            \n            }\n        }\n\n        return cornerNumbers\n    }\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                cellBackgrounds={this.getBackgrounds()}\n                cornerNumbers={this.getCornerNumbers()}\n                hiddenLiterals={[0]}\n                />)\n    }\n}\n\nexport default KakuroBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass KakuroBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.blocks)\n                    .map(o => Object.values(o)),\n            gridSize: this.props.params.grid,\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n        const {grid, gridSize} = this.state;\n        for(let i = 0; i < gridSize; i++) {\n            borders[i] = []\n            for(let j = 0; j < gridSize; j++) {\n                borders[i].push(\n                    {\n                        borderTop: \n                            i===0 || grid[i-1][j] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===gridSize - 1 || grid[i+1][j] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 || grid[i][j-1] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===gridSize - 1 || grid[i][j+1] !== grid[i][j] ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\"\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    getBackgrounds() {\n        let backgrounds = {\"1\": \"url(images/star.png)\"}\n        \n        return backgrounds;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                cellBorders={this.getCellBorders()}\n                literalBackgrounds={this.getBackgrounds()}\n                />)\n    }\n}\n\nexport default KakuroBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass FutoshikiBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lessThans: Object.values(this.props.params.lt)\n                    .map(o => Object.values(o)),\n            size: this.props.params.SIZE\n        }\n    }\n\n    getRightLabels() {\n        let rightLabels = []\n        const {size, lessThans} = this.state;\n        for(let i = 0; i < size; i++) {\n            rightLabels[i] = []\n            for(let j = 0; j < size; j++) {\n                rightLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        for(let lessThan of lessThans) {\n            const i1 = lessThan[0];\n            const i2 = lessThan[1];\n            const j1 = lessThan[2];\n            const j2 = lessThan[3];\n\n            if(i1===j1) {\n                if(i2 < j2) {\n                    rightLabels[i1-1][i2-1] = \"<\"\n                } else {\n                    rightLabels[j1-1][j2-1] = \">\"\n                }\n            }\n        }\n        return rightLabels;\n    }\n\n    getBottomLabels() {\n        let bottomLabels = []\n        const {size, lessThans} = this.state;\n        for(let i = 0; i < size; i++) {\n            bottomLabels[i] = []\n            for(let j = 0; j < size; j++) {\n                bottomLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        for(let lessThan of lessThans) {\n            const i1 = lessThan[0];\n            const i2 = lessThan[1];\n            const j1 = lessThan[2];\n            const j2 = lessThan[3];\n\n            if(i2===j2) {\n                if(i1 < j1) {\n                    bottomLabels[i1-1][i2-1] = \"\\u2227\"\n                } else {\n                    bottomLabels[j1-1][j2-1] = \"\\u2228\"\n                }\n            }\n        }\n\n        return bottomLabels;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                cellMargin={{margin: \"20px\"}}\n                rightLabels={this.getRightLabels()}\n                bottomLabels={this.getBottomLabels()}\n                />)\n    }\n}\n\nexport default FutoshikiBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass ThermometerBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            colsums: Object.values(this.props.params.colsums),\n            rowsums: Object.values(this.props.params.rowsums),\n            grid: Object.values(this.props.params.therms)\n                    .map(o => Object.values(o))\n        }\n    }\n\n    getBackgrounds() {\n        const {grid} = this.state;\n        let backgrounds = []\n        const xsize = this.state.grid.length;\n        const ysize = this.state.grid[0].length;\n        for(let i = 0; i < xsize; i++) {\n            backgrounds[i] = []\n            for(let j = 0; j < ysize; j++) {\n                const thermNum = Math.floor(grid[i][j] / 10)\n                const north = i > 0 ? Math.floor(grid[i-1][j] / 10) : null\n                const south = i < xsize - 1 ? Math.floor(grid[i+1][j] / 10) : null\n                const west = j > 0 ? Math.floor(grid[i][j-1] / 10) : null\n                const east = j < ysize - 1 ? Math.floor(grid[i][j+1] / 10) : null\n\n                if(grid[i][j] % 10 === 1) {\n                    if(north === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadN.png)\")\n                    } else if(west === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadW.png)\")\n                    } else if(east === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadE.png)\")\n                    } else if(south === thermNum) {\n                        backgrounds[i].push(\"url(images/themHeadS.png)\")\n                    }\n                } else {\n                    if(north === thermNum && south !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipS.png)\")    \n                    } else if(south === thermNum && north !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipN.png)\")\n                    } else if(north === thermNum && south === thermNum) {\n                        backgrounds[i].push(\"url(images/themV.png)\")\n                    } else if(east === thermNum && west !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipW.png)\")    \n                    } else if(west === thermNum && east !== thermNum) {\n                        backgrounds[i].push(\"url(images/themTipE.png)\")\n                    } else if(east === thermNum && west === thermNum) {\n                        backgrounds[i].push(\"url(images/themH.png)\")\n                    }\n                }\n                \n            }\n        }\n\n        return backgrounds;\n    }\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < this.state.grid.length; i++) {\n            borders[i] = []\n            for(let j = 0; j < this.state.grid[0].length; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===this.state.x - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===this.state.y - 1 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                cellBackgrounds={this.getBackgrounds()}\n                highlighted={this.props.highlighted} \n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                rows={this.props.rows}\n                cellBorders={this.getCellBorders()}\n                />)\n    }\n}\n\nexport default ThermometerBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass SkyscrapersBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            size: this.props.params.SIZE,\n            rowsums: Object.values(this.props.params.CLUES[\"1\"])\n                    .map(num => num === 0 ? null : num),\n            colsums: Object.values(this.props.params.CLUES[\"2\"])\n                    .map(num => num === 0 ? null : num),\n            endrowsums: Object.values(this.props.params.CLUES[\"3\"])\n                    .map(num => num === 0 ? null : num),\n            endcolsums: Object.values(this.props.params.CLUES[\"4\"])\n                    .map(num => num === 0 ? null : num),\n        }\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                endcolsums={this.state.endcolsums}\n                rowsums={this.state.rowsums}\n                endrowsums={this.state.endrowsums}\n\n                />)\n    }\n}\n\nexport default SkyscrapersBoard;","import React from 'react'\nimport Board from '../Board/Board'\nclass GaramBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.presetvals)\n                .map(o => Object.values(o)),\n            operations: Object.values(this.props.params.op),\n            opMap: {1: \"+\", 2: \"-\", 3: \"\\u00D7\"}\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n        const {grid} = this.state;\n\n        for(let i = 0; i < grid.length; i++) {\n            borders[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                borders[i].push(\n                    {\n                        borderTop: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderBottom: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderLeft: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        borderRight: grid[i][j] === -2 ? \"2px solid transparent\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    // The positions of the operations is the same every time in garam, so we can hardcode.\n    getRightLabels() {\n        let rightLabels = []\n        const {grid, opMap, operations} = this.state\n        for(let i = 0; i < grid.length; i++) {\n            rightLabels[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                rightLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        rightLabels[0][1] = '='\n        rightLabels[0][5] = '='\n        rightLabels[1][3] = '='\n        rightLabels[3][1] = '='\n        rightLabels[3][5] = '='\n        rightLabels[5][1] = '='\n        rightLabels[5][5] = '='\n        rightLabels[8][1] = '='\n        rightLabels[8][5] = '='\n        \n        rightLabels[0][0] = opMap[operations[0]]\n        rightLabels[0][4] = opMap[operations[1]]\n        rightLabels[1][2] = opMap[operations[6]]\n        rightLabels[3][0] = opMap[operations[7]]\n        rightLabels[3][4] = opMap[operations[8]]\n        rightLabels[5][0] = opMap[operations[11]]\n        rightLabels[5][4] = opMap[operations[12]]\n        rightLabels[6][2] = opMap[operations[17]]\n        rightLabels[8][0] = opMap[operations[18]]\n        rightLabels[8][4] = opMap[operations[19]]\n        return rightLabels;\n    }\n\n    getBottomLabels() {\n        let bottomLabels = []\n        const {grid, opMap, operations} = this.state;\n\n        for(let i = 0; i < grid.length; i++) {\n            bottomLabels[i] = []\n            for(let j = 0; j < grid[0].length; j++) {\n                bottomLabels[i].push(\n                   null\n                )\n            }\n        }\n\n        bottomLabels[1][0] = \"=\"\n        bottomLabels[1][2] = \"=\"\n        bottomLabels[1][4] = \"=\"\n        bottomLabels[1][6] = \"=\"\n        bottomLabels[4][1] = \"=\"\n        bottomLabels[4][5] = \"=\"\n        bottomLabels[6][0] = \"=\"\n        bottomLabels[6][2] = \"=\"\n        bottomLabels[6][4] = \"=\"\n        bottomLabels[6][6] = \"=\"\n        \n        bottomLabels[0][0] = opMap[operations[2]]\n        bottomLabels[0][2] = opMap[operations[3]]\n        bottomLabels[0][4] = opMap[operations[4]]\n        bottomLabels[0][6] = opMap[operations[5]]\n        bottomLabels[3][1] = opMap[operations[9]]\n        bottomLabels[3][5] = opMap[operations[10]]\n        bottomLabels[5][0] = opMap[operations[13]]\n        bottomLabels[5][2] = opMap[operations[14]]\n        bottomLabels[5][4] = opMap[operations[15]]\n        bottomLabels[5][6] = opMap[operations[16]]\n\n        return bottomLabels;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                hiddenLiterals={[-2]}\n                cellBorders={this.getCellBorders()}\n                rightLabels={this.getRightLabels()}\n                bottomLabels={this.getBottomLabels()}\n                />)\n    }\n}\n\nexport default GaramBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass NonogramBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rowcounts: Object.values(this.props.params.rowcounts)\n                    .map(o => Object.values(o)),\n            colcounts: Object.values(this.props.params.colcounts)\n                .map(o => Object.values(o)),\n        }\n    }\n\n    getBackgrounds() {\n        let backgrounds = {};\n\n        \n        backgrounds[\"0\"] = \"linear-gradient(white, white)\"\n        backgrounds[\"1\"] = \"linear-gradient(black, black)\"\n        \n        \n        return backgrounds;\n    }\n\n    transpose(array) {\n        return array[0].map((_, colIndex) => array.map(row => row[colIndex]));\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                literalBackgrounds={this.getBackgrounds()}\n                hiddenLiterals={[0, 1]}\n                startrows={this.transpose(this.state.colcounts)}\n                startcols={this.transpose(this.state.rowcounts)}\n                />)\n    }\n}\n\nexport default NonogramBoard;","import React from 'react';\nimport Board from '../Board/Board';\n\nclass SudokuBoard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: Object.values(this.props.params.grid)\n            .map(o => Object.values(o)),\n            hints: this.props.params.hints\n        }\n    }\n\n    getCellBorders() {\n        let borders = []\n\n        for(let i = 0; i < 9; i++) {\n            borders[i] = []\n            for(let j = 0; j < 9; j++) {\n                borders[i].push(\n                    {\n                        borderTop: i%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderBottom: i===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderLeft: j%3===0 ? \"2px solid black\" : \"2px solid lightgray\",\n                        borderRight: j===8 ? \"2px solid black\" : \"2px solid lightgray\",\n                        marginLeft: \"-2px\",\n                        marginBottom: \"-2px\",\n                    }\n                )\n            }\n        }\n\n        return borders;\n    }\n\n    render() {\n        return (<Board\n                highlight={this.props.highlight} \n                key={this.props.key} \n                highlighted={this.props.highlighted} \n                rows={this.props.rows}\n                colsums={this.state.colsums}\n                rowsums={this.state.rowsums}\n                cellBorders={this.getCellBorders()}\n                literalSize={0.7}\n                />)\n    }\n}\n\nexport default SudokuBoard;","import React from 'react';\nimport NavSwitcher from './NavSwitcher';\nimport Board from './Board/Board';\nimport ExplanationList from \"./Explanations/ExplanationList\";\n\nimport { Row, Col, Card } from 'react-bootstrap';\n\nimport TentsBoard from './PuzzleBoards/TentsBoard';\nimport BinairoBoard from './PuzzleBoards/BinairoBoard';\nimport KillerBoard from './PuzzleBoards/KillerBoard';\nimport KakuroBoard from './PuzzleBoards/KakuroBoard';\nimport StarBattleBoard from './PuzzleBoards/StarBattleBoard';\nimport FutoshikiBoard from './PuzzleBoards/FutoshikiBoard';\nimport ThermometerBoard from './PuzzleBoards/ThermometerBoard';\nimport SkyscrapersBoard from './PuzzleBoards/SkyscrapersBoard';\nimport GaramBoard from './PuzzleBoards/GaramBoard';\nimport NonogramBoard from './PuzzleBoards/NonogramBoard';\nimport SudokuBoard from './PuzzleBoards/SudokuBoard';\n\n/**\n * Main puzzle visualiser with a board on the left and explanations on the right.\n */\nclass PuzzleStepper extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentStep: 0,\n            highlightedLiterals: -1,\n            highlightedExplanations: [],\n            currentAlternative: 0,\n            type: this.props.type,\n            params: this.props.params,\n            inputObject: this.props.inputObject\n        }\n    }\n\n    /* Two-way highlighting system: mouseover an explanation and see relevant literals,\n        mouseover a literals to see relevant explanations. \n    */\n    highlightLiteral(val) {\n        this.setState((prev) => { return { highlightedLiterals: prev.highlightedLiterals === val ? -1 : val } });\n    }\n\n    highlightExplanation(val) {\n        this.setState((prev) => \n            { return { \n                highlightedExplanations:\n                    JSON.stringify(prev.highlightedExplanations)===JSON.stringify(val) ? \n                        [] : val } });\n    }\n\n    // Passed to the NavSwitcher for overall steps\n    setCurrentStep(step) {\n        this.setState({ currentStep: step, currentAlternative: 0});\n    }\n\n    // Passed to the NavSwitcher for switching between alternatives.\n    setAlternative(number) {\n        this.setState({currentAlternative: number})\n    }\n\n    // Choose a board if we have defined one for this puzzle type.\n    chooseBoard(boardProps) {\n        switch(this.state.type) {\n            case \"tents.eprime\":\n                return <TentsBoard {...boardProps}/>\n            case \"binairo.eprime\":\n                return <BinairoBoard {...boardProps}/>\n            case \"nice_killer.eprime\":\n                return <KillerBoard {...boardProps}/>\n            case \"star-battle.eprime\":\n                return <StarBattleBoard {...boardProps}/>\n            case \"kakuro.eprime\":\n                return <KakuroBoard {...boardProps}/>\n            case \"nfutoshiki.eprime\":\n                return <FutoshikiBoard {...boardProps}/>\n            case \"thermometer.eprime\":\n                return <ThermometerBoard {...boardProps}/>\n            case \"skyscrapers.eprime\":\n                return <SkyscrapersBoard {...boardProps}/>\n            case \"garam.eprime\":\n                return <GaramBoard {...boardProps}/>\n            case \"nonogram.eprime\":\n                return <NonogramBoard {...boardProps}/>\n            case \"x-sums.eprime\":\n                return <SudokuBoard {...boardProps} />\n            default:\n                return <Board {...boardProps}/>\n        }\n    }\n    render() {\n        const stepData = this.state.currentAlternative=== 0 ?\n            this.state.inputObject[this.state.currentStep]\n            : this.state.inputObject[this.state.currentStep].otherChoices[this.state.currentAlternative - 1]\n\n        // Core required board props. \n        const boardProps = {\n            params: this.state.params,\n            highlight: this.highlightExplanation.bind(this),\n            key: this.state.highlightedLiterals,\n            highlighted: this.state.highlightedLiterals, \n            rows: stepData.puzzleState.matrices[0].rows\n        }\n        return (\n            <React.Fragment>\n                <NavSwitcher \n                    className=\"mt-3 p-3\" \n                    stepName={\"step\"} \n                    setCurrentStep={this.setCurrentStep.bind(this)} \n                    maxSteps={this.state.inputObject.length - 1} \n                    currentStep={this.state.currentStep}/>\n\n                <Row className=\"mb-4\">\n                    {/*The main board: adjust width based on screen size */}\n                    <Col xs={12} md={8} lg={8} xl={6}>\n                        {this.chooseBoard(boardProps)} \n                    </Col>\n\n                    {/*The explanations*/}\n                    <Col>\n                        {stepData.skippedDeductions &&\n                            <Card className=\"mt-3\">\n                                <Card.Body>\n                                    <small>Skipped some obvious deductions.</small>\n                                </Card.Body>\n                            </Card>\n                        }\n\n                        <ExplanationList\n                            highlight={this.highlightLiteral.bind(this)}\n\n                            /* Only one of simpleDeductions or deductions should be defined. */\n                            simpleDeductions={stepData.simpleDeductions}\n                            deduction={stepData.deduction}\n\n                            highlighted={this.state.highlightedExplanations} \n\n                            /* Props for displaying alternatives */\n                            otherChoices={this.state.inputObject[this.state.currentStep].otherChoices}\n                            smallestMUSSize={this.state.inputObject[this.state.currentStep].smallestMUSSize}\n                            setAlternative={this.setAlternative.bind(this)}\n                            currentAlternative={this.state.currentAlternative}\n                            />\n                        \n                        \n                    </Col>\n                </Row>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PuzzleStepper;","import axios from \"axios\";\n\nasync function getExamples() {\n    const response = await axios.get(\"examples\");\n    return response.data;\n}\n\nasync function getExampleData(exampleName) {\n    const response = await axios.get(`examples/${exampleName}`);\n    return response.data;\n}\n\nasync function createJob(eprimename, eprime, paramname, param) {\n    const response = await axios.post(\"api/job\", {\n        eprimeName: eprimename,\n        eprime: eprime,\n        paramName: paramname,\n        param: param\n    })\n    return response.data\n}\n\nasync function getJob(jobId) {\n    const response = await axios.get(`api/job/${jobId}`);\n    return response.data\n}\n\nasync function getJobOutput(jobId) {\n    const response = await axios.get(`api/job/${jobId}/output`);\n    return response.data\n}\n\n\nexport { getExamples, getExampleData, createJob, getJob, getJobOutput};\n\n","import React from 'react';\n\nclass FileUploader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.fileInput = React.createRef();\n    }\n\n    uploadFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            try {\n                const text = (e.target.result);\n                this.props.onUpload(text, this.fileInput.current.files[0].name);\n            } catch {\n                this.props.onError();\n            }\n        };\n        reader.readAsText(e.target.files[0])\n    }\n\n    render() {\n        return <input \n                disabled={this.props.disabled} \n                type=\"file\" \n                ref={this.fileInput} \n                onChange={(e) => this.uploadFile(e)} />\n    }\n}\n\nexport default FileUploader;","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nimport * as API from \"../API\";\n\nclass JobWait extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {status: \"pending\", pollDelay: 1000, pollCount: 0}\n    }\n    componentDidMount() {\n        this.timer = setInterval(()=> this.checkStatus(), this.state.pollDelay);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.pollDelay !== this.state.pollDelay) {\n            clearInterval(this.timer)\n            this.timer = setInterval(() => this.checkStatus(), this.state.pollDelay)\n        }\n    }\n    \n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n    \n    checkStatus() {\n        API.getJob(this.props.jobId)\n            .then(res => res.status === \"finished\" && \n                API.getJobOutput(this.props.jobId)\n                    .then(output => {\n                        clearInterval(this.timer)\n                        this.props.setInput(output)})) \n        this.setState({pollCount: this.state.pollCount + 1})\n        if(this.state.pollCount === 10) {\n            this.setState({pollDelay: 10000})\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Spinner animation=\"border\"/>\n                <h4>demystify is running... </h4> \n                <p><b>Job ID:</b> {this.props.jobId}</p>\n                <p>If you don't want to wait here for the job to complete you can check its progress later\n                    at: <br /> <a href={window.location + \"api/job/\" + this.props.jobId}>{window.location + \"api/job/\" + this.props.jobId}</a>\n                    <br /> and then save the result when it's ready from: \n                    <br /> <a href={window.location + \"api/job/\" + this.props.jobId + \"/output\"}>{window.location + \"api/job/\" + this.props.jobId + \"/output\"}</a>\n                    </p>\n\n            </div>\n        )\n    }\n}\n\nexport default JobWait;","import React from 'react';\nimport { Card, Row, ListGroup, Dropdown, Alert, Spinner, Button, Form } from 'react-bootstrap'\nimport * as API from \"../API\";\nimport FileUploader from './FileUploader';\nimport JobWait from './JobWait';\n\n/**\n * Load a JSON input from the user's filesystem or preloaded examples.\n */\nclass MainMenu extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            examples: [],\n            eprime: null,\n            eprimename: null,\n            param: null,\n            paramname: null,\n            error: \"\",\n            jobId: null,\n            isLoadingExamples: true,\n            liveMode: \"default\",\n            isQueueing: false,\n            isWaiting: false\n        };\n    }\n\n    componentDidMount() {\n        API.getExamples()\n            .then(res => this.setState({ examples: res },\n                () => this.setState({ isLoadingExamples: false })));\n    }\n\n    async handleGo() {\n        if (!this.state.eprime || !this.state.param) {\n            this.setError(\n                \"Please upload .eprime and .param files to run Demystify.\");\n            return;\n        }\n\n        this.setState({ isRunning: true });\n        const { eprimename, eprime, paramname, param } = this.state;\n\n        try {\n            const result = await API.createJob(eprimename, eprime, paramname, param);\n            this.setState({isWaiting: true, jobId: result.jobId})\n            \n        } catch (err) {\n            this.setError(\n                \"There was a problem running Demystify on the server.\");\n            this.setState({ isRunning: false });\n        }\n    }\n\n    setError(message) {\n        this.setState({ error: message });\n    }\n\n    componentDidUpdate = () => {\n        if (this.state.isQueueing) {\n            window.onbeforeunload = () => { return true; }\n        } else {\n            window.onbeforeunload = undefined\n        }\n    }\n\n    async getExamples() {\n        const examples = await API.getExamples();\n\n        try {\n            const items = examples.map(name =>\n                <Dropdown.Item>\n                    {name}\n                </Dropdown.Item>);\n            return items;\n        } catch {\n            return (\n                <Alert className=\"m-0\" variant=\"warning\">\n                    Error fetching examples.\n                </Alert>)\n        }\n    }\n\n    async chooseExample(name) {\n        const example = await API.getExampleData(name);\n        this.props.setInput(example);\n    }\n\n    handleModeChange(e) {\n        this.setState({\n            liveMode: e.target.value\n        });\n    }\n\n    render() {\n        return (\n            \n            <div className=\"d-flex flex-column align-items-center\">\n                <h1 className=\"mt-3\">Demystify Visualiser</h1>\n                <img className=\"mt-3\" style={{ width: \"100px\" }} alt=\"demystify logo\" src=\"favicon.ico\" />\n                <Card as={Row} className=\"mt-3 pt-3 w-75\">\n                    {this.state.isWaiting ? <JobWait jobId={this.state.jobId} setInput={this.props.setInput}/> :\n                    <ListGroup variant=\"flush\">\n                        <ListGroup.Item>\n                            <Row>\n                                {/* Basic file selection. */}\n                                <b className=\"mx-4\">  Load Demystify output from JSON file:</b>\n                                <FileUploader\n                                    disabled={this.state.isQueueing}\n                                    onUpload={(text) => this.props.setInput(JSON.parse(text))}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a JSON file produced by Demystify.\")}\n                                />\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <b className=\"mx-4 pt-2\">View a pre-generated example:</b>\n                                <Dropdown onSelect={(e) => this.chooseExample(e)}>\n                                    <Dropdown.Toggle disabled={this.state.isQueueing} variant=\"success\" id=\"dropdown-basic\">\n                                        Examples\n                                    </Dropdown.Toggle>\n\n\n                                    <Dropdown.Menu>\n                                        {this.state.isLoadingExamples ?\n                                            <div className=\"d-flex justify-content-center\">\n                                                <Spinner animation=\"border\" />\n                                            </div>\n                                            :\n                                            this.state.examples.map((name) =>\n                                                <Dropdown.Item key={name} eventKey={name} onClick={() => this.chooseExample(name)}>\n                                                    {name}\n                                                </Dropdown.Item>)}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n\n                            <Row>\n                                <b className=\"mx-4 mb-4\">Run Demystify live:</b>\n                            </Row>\n                            <Row>\n                                <p className=\"mx-4\">Puzzle description (.eprime): </p>\n                                <FileUploader\n                                    disabled={this.state.isQueueing}\n                                    onUpload={(text, name) => this.setState({ eprime: text, eprimename: name })}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a valid .eprime file.\")}\n                                />\n                            </Row>\n\n                            <Row>\n                                <p className=\"mx-4\">Puzzle instance (.param): </p>\n                                <FileUploader\n                                    disabled={this.state.isQueueing}\n                                    onUpload={(text, name) => this.setState({ param: text, paramname: name })}\n                                    onError={() => this.setError(\n                                        \"Could not read the input file. Ensure it is a valid .param file.\")}\n                                />\n                            </Row>\n                            {<Row>\n                                <Form inline className=\"mx-4 mb-3\">\n                                    \n                                            <Form.Check className=\"mr-4\"\n                                                type=\"radio\"\n                                                name=\"mode\"\n                                                value=\"default\"\n                                                checked={this.state.liveMode === \"default\"}\n                                                onChange={this.handleModeChange.bind(this)}\n                                                label=\"Use default MUS choices\"\n                                            />\n\n                                            <Form.Check\n                                                type='radio'\n                                                name=\"mode\"\n                                                value=\"manual\"\n                                                checked={this.state.liveMode === \"manual\"}\n                                                onChange={this.handleModeChange.bind(this)}\n                                                label=\"Choose MUSes manually (slower)\"\n                                            />\n                                </Form>\n                            </Row>}\n                            <Row>\n                                <Button\n                                    disabled={this.state.isQueueing}\n                                    className=\"mx-4\"\n                                    variant=\"success\"\n                                    onClick={this.handleGo.bind(this)}>\n                                    Go\n                                </Button>\n                                {this.state.isQueueing &&\n                                    <React.Fragment>\n                                        <Spinner animation=\"border\" />\n                                        <p className=\"ml-4\">Setting up Demystify job...</p>\n                                    </React.Fragment>\n\n                                }\n                            </Row>\n\n                        </ListGroup.Item>\n                    </ListGroup> }\n                </Card>\n                {this.state.error.length > 0 &&\n                    <Alert variant=\"warning\" className=\"mt-3 p-4 w-75 text-center\">\n                        {this.state.error}\n                    </Alert>}\n            </div>\n        )\n    }\n}\n\nexport default MainMenu;","import React from 'react';\n\nimport { Container} from 'react-bootstrap';\nimport PuzzleStepper from './PuzzleStepper';\nimport MainMenu from './MainMenu';\n\n/**\n * Currently the main content component for this application.\n */\nclass DemystifyViewer extends React.Component {\n  state = {\n    inputObject: [],\n    type: \"\",\n    params: {},\n    error: false,\n  }\n  \n  // Load the steps, the type of puzzle, and the params (configuration) of the puzzle\n  setJSONInput(obj) {\n    this.setState({ inputObject: obj.steps, type: obj.name, params: obj.params },\n      () => !(this.state.inputObject && this.state.type && this.state.params)  \n      && this.setError()) \n  }\n\n  // Avoid invalid JSON\n  setError() {\n    this.setState({error: true});\n  }\n\n  conponentDidUpdate(prevProps, prevState) {\n    if(prevState.error) this.setState({error: false});\n  }\n\n  render = () => {\n    return (\n      <Container fluid style={{textAlign: \"center\"}}>\n        \n        {/*If the puzzle has not been correctly loaded, display the main menu*/\n          (this.state.inputObject.length === 0 || this.state.error) ?\n            <MainMenu setInput={this.setJSONInput.bind(this)} />\n          :\n          /*Otherwise display the main puzzle visualiser*/\n          <PuzzleStepper\n            inputObject={this.state.inputObject}\n            type={this.state.type}\n            params={this.state.params} />\n        }\n      </Container>\n    )\n  }\n}\n\nexport default DemystifyViewer\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport DemystifyViewer from './components/DemystifyViewer';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DemystifyViewer/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}