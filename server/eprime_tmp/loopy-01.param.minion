MINION 3
**VARIABLES**
BOOL edges_00001_00000_00000 #
BOOL edges_00001_00000_00001 #
BOOL edges_00001_00000_00002 #
BOOL edges_00001_00000_00003 #
BOOL edges_00001_00001_00000 #
BOOL edges_00001_00001_00001 #
BOOL edges_00001_00001_00002 #
BOOL edges_00001_00001_00003 #
BOOL edges_00001_00002_00000 #
BOOL edges_00001_00002_00001 #
BOOL edges_00001_00002_00002 #
BOOL edges_00001_00002_00003 #
BOOL edges_00001_00003_00000 #
BOOL edges_00001_00003_00001 #
BOOL edges_00001_00003_00002 #
BOOL edges_00001_00003_00003 #
BOOL edges_00002_00000_00000 #
BOOL edges_00002_00000_00001 #
BOOL edges_00002_00000_00002 #
BOOL edges_00002_00000_00003 #
BOOL edges_00002_00001_00000 #
BOOL edges_00002_00001_00001 #
BOOL edges_00002_00001_00002 #
BOOL edges_00002_00001_00003 #
BOOL edges_00002_00002_00000 #
BOOL edges_00002_00002_00001 #
BOOL edges_00002_00002_00002 #
BOOL edges_00002_00002_00003 #
BOOL edges_00002_00003_00000 #
BOOL edges_00002_00003_00001 #
BOOL edges_00002_00003_00002 #
BOOL edges_00002_00003_00003 #
DISCRETE q #
{4..24}
DISCRETE loop_FunctionND_00001_00000_00000 #
{0..24}
DISCRETE loop_FunctionND_00001_00000_00001 #
{0..24}
DISCRETE loop_FunctionND_00001_00000_00002 #
{0..24}
DISCRETE loop_FunctionND_00001_00000_00003 #
{0..24}
DISCRETE loop_FunctionND_00001_00001_00000 #
{0..24}
DISCRETE loop_FunctionND_00001_00001_00001 #
{0..24}
DISCRETE loop_FunctionND_00001_00001_00002 #
{0..24}
DISCRETE loop_FunctionND_00001_00001_00003 #
{0..24}
DISCRETE loop_FunctionND_00001_00002_00000 #
{0..24}
DISCRETE loop_FunctionND_00001_00002_00001 #
{0..24}
DISCRETE loop_FunctionND_00001_00002_00002 #
{0..24}
DISCRETE loop_FunctionND_00001_00002_00003 #
{0..24}
DISCRETE loop_FunctionND_00001_00003_00000 #
{0..24}
DISCRETE loop_FunctionND_00001_00003_00001 #
{0..24}
DISCRETE loop_FunctionND_00001_00003_00002 #
{0..24}
DISCRETE loop_FunctionND_00001_00003_00003 #
{0..24}
DISCRETE loop_FunctionND_00002_00000_00000 #
{0..24}
DISCRETE loop_FunctionND_00002_00000_00001 #
{0..24}
DISCRETE loop_FunctionND_00002_00000_00002 #
{0..24}
DISCRETE loop_FunctionND_00002_00000_00003 #
{0..24}
DISCRETE loop_FunctionND_00002_00001_00000 #
{0..24}
DISCRETE loop_FunctionND_00002_00001_00001 #
{0..24}
DISCRETE loop_FunctionND_00002_00001_00002 #
{0..24}
DISCRETE loop_FunctionND_00002_00001_00003 #
{0..24}
DISCRETE loop_FunctionND_00002_00002_00000 #
{0..24}
DISCRETE loop_FunctionND_00002_00002_00001 #
{0..24}
DISCRETE loop_FunctionND_00002_00002_00002 #
{0..24}
DISCRETE loop_FunctionND_00002_00002_00003 #
{0..24}
DISCRETE loop_FunctionND_00002_00003_00000 #
{0..24}
DISCRETE loop_FunctionND_00002_00003_00001 #
{0..24}
DISCRETE loop_FunctionND_00002_00003_00002 #
{0..24}
DISCRETE loop_FunctionND_00002_00003_00003 #
{0..24}
DISCRETE tlr #
{1..3}
DISCRETE tlc #
{1..3}
DISCRETE conjure_aux1 #
{1..3}
DISCRETE conjure_aux2 #
{1..3}
DISCRETE aux0 #
{0..32}
DISCRETE aux1 #
{0..32}
DISCRETE aux2 #
{0..32}
DISCRETE aux3 #
{0..32}
DISCRETE aux4 #
{0..32}
DISCRETE aux5 #
{0..32}
DISCRETE aux6 #
{0..32}
DISCRETE aux7 #
{0..32}
DISCRETE aux8 #
{0..32}
DISCRETE aux9 #
{0..32}
DISCRETE aux10 #
{0..32}
DISCRETE aux11 #
{0..32}
DISCRETE aux12 #
{0..32}
DISCRETE aux13 #
{0..32}
DISCRETE aux14 #
{0..32}
DISCRETE aux15 #
{0..32}
DISCRETE aux16 #
{0..32}
DISCRETE aux17 #
{0..32}
DISCRETE aux18 #
{0..32}
DISCRETE aux19 #
{0..32}
DISCRETE aux20 #
{0..32}
DISCRETE aux21 #
{0..32}
DISCRETE aux22 #
{0..32}
DISCRETE aux23 #
{0..32}
DISCRETE aux24 #
{0..32}
DISCRETE aux25 #
{3..23}
DISCRETE aux26 #
{3..23}
DISCRETE aux27 #
{3..23}
DISCRETE aux28 #
{3..23}
DISCRETE aux29 #
{3..23}
DISCRETE aux30 #
{3..23}
DISCRETE aux31 #
{3..23}
DISCRETE aux32 #
{3..23}
DISCRETE aux33 #
{3..23}
DISCRETE aux34 #
{3..23}
DISCRETE aux35 #
{3..23}
DISCRETE aux36 #
{3..23}
DISCRETE aux37 #
{3..23}
DISCRETE aux38 #
{3..23}
DISCRETE aux39 #
{3..23}
DISCRETE aux40 #
{3..23}
DISCRETE aux41 #
{3..23}
DISCRETE aux42 #
{3..23}
DISCRETE aux43 #
{3..23}
DISCRETE aux44 #
{3..23}
DISCRETE aux45 #
{3..23}
DISCRETE aux46 #
{3..23}
DISCRETE aux47 #
{3..23}
DISCRETE aux48 #
{3..23}
DISCRETE aux49 #
{3..23}
DISCRETE aux50 #
{3..23}
DISCRETE aux51 #
{3..23}
DISCRETE aux52 #
{3..23}
DISCRETE aux53 #
{3..23}
DISCRETE aux54 #
{3..23}
DISCRETE aux55 #
{3..23}
DISCRETE aux56 #
{3..23}
DISCRETE aux57 #
{3..23}
DISCRETE aux58 #
{3..23}
DISCRETE aux59 #
{3..23}
DISCRETE aux60 #
{3..23}
DISCRETE aux61 #
{3..23}
DISCRETE aux62 #
{3..23}
DISCRETE aux63 #
{3..23}
DISCRETE aux64 #
{3..23}
DISCRETE aux65 #
{3..23}
DISCRETE aux66 #
{3..23}
DISCRETE aux67 #
{3..23}
DISCRETE aux68 #
{3..23}
DISCRETE aux69 #
{3..23}
DISCRETE aux70 #
{3..23}
DISCRETE aux71 #
{3..23}
DISCRETE aux72 #
{3..23}
DISCRETE aux73 #
{3..23}
DISCRETE aux74 #
{3..23}
DISCRETE aux75 #
{3..23}
DISCRETE aux76 #
{3..23}
DISCRETE aux77 #
{3..23}
DISCRETE aux78 #
{3..23}
DISCRETE aux79 #
{3..23}
DISCRETE aux80 #
{3..23}
DISCRETE aux81 #
{3..23}
DISCRETE aux82 #
{3..23}
DISCRETE aux83 #
{3..23}
DISCRETE aux84 #
{3..23}
BOOL aux85 #(edges_00001_00000_00001 \/ edges_00002_00001_00000)
BOOL aux86 #(edges_00001_00000_00002 \/ edges_00002_00001_00001)
BOOL aux87 #(edges_00001_00000_00003 \/ edges_00002_00001_00002)
BOOL aux88 #(edges_00001_00002_00001 \/ edges_00002_00003_00000)
BOOL aux89 #(edges_00001_00002_00002 \/ edges_00002_00003_00001)
BOOL aux90 #(edges_00001_00002_00003 \/ edges_00002_00003_00002)
BOOL aux91 #(edges_00001_00001_00001 \/ edges_00002_00002_00000)
BOOL aux92 #(edges_00001_00001_00002 \/ edges_00002_00002_00001)
BOOL aux93 #(edges_00001_00001_00003 \/ edges_00002_00002_00002)
BOOL aux94 #(edges_00001_00000_00001 \/ edges_00002_00001_00000)
BOOL aux95 #(edges_00001_00000_00002 \/ edges_00002_00001_00001)
BOOL aux96 #(edges_00001_00000_00003 \/ edges_00002_00001_00002)
BOOL aux97 #(edges_00001_00002_00001 \/ edges_00002_00003_00000)
BOOL aux98 #(edges_00001_00002_00002 \/ edges_00002_00003_00001)
BOOL aux99 #(edges_00001_00002_00003 \/ edges_00002_00003_00002)
BOOL aux100 #(edges_00001_00001_00001 \/ edges_00002_00002_00000)
BOOL aux101 #(edges_00001_00001_00002 \/ edges_00002_00002_00001)
BOOL aux102 #(edges_00001_00001_00003 \/ edges_00002_00002_00002)
BOOL aux103 #((aux94 + aux95 + aux96 + aux97 + aux98 + aux99 + aux100 + aux101 + aux102)=tv=0)
BOOL aux104 #(edges_00001_00000_00001 \/ edges_00002_00001_00000)
BOOL aux105 #(edges_00001_00000_00002 \/ edges_00002_00001_00001)
BOOL aux106 #(edges_00001_00000_00003 \/ edges_00002_00001_00002)
BOOL aux107 #(edges_00001_00002_00001 \/ edges_00002_00003_00000)
BOOL aux108 #(edges_00001_00002_00002 \/ edges_00002_00003_00001)
BOOL aux109 #(edges_00001_00002_00003 \/ edges_00002_00003_00002)
BOOL aux110 #(edges_00001_00001_00001 \/ edges_00002_00002_00000)
BOOL aux111 #(edges_00001_00001_00002 \/ edges_00002_00002_00001)
BOOL aux112 #(edges_00001_00001_00003 \/ edges_00002_00002_00002)
DISCRETE aux113 #(-1 + tlr)
{0..2}
DISCRETE aux114 #(-1 + tlr)
{0..2}
DISCRETE aux115 #(-1 + tlr)
{0..2}
DISCRETE aux116 #(-1 + tlr)
{0..2}
BOOL aux117 #(Element([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr) \/ Element([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux116))
DISCRETE aux118 #(-1 + tlr)
{0..2}
BOOL aux119 #(Element([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr) \/ Element([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux118))
DISCRETE aux120 #(-1 + tlr)
{0..2}
BOOL aux121 #(Element([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr) \/ Element([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux120))
DISCRETE aux122 #(-1 + tlr)
{0..2}
BOOL aux123 #(Element([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr) \/ Element([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux122))
DISCRETE aux124 #(-1 + tlr)
{0..2}
BOOL aux125 #(Element([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr) \/ Element([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux124))
DISCRETE aux126 #(-1 + tlr)
{0..2}
BOOL aux127 #(Element([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr) \/ Element([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux126))
BOOL aux128 #((aux123 + aux125 + aux127)=tv=0)
DISCRETE aux129 #(-1 + tlr)
{0..2}
BOOL aux130 #(Element([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr) \/ Element([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux129))
DISCRETE aux131 #(-1 + tlr)
{0..2}
BOOL aux132 #(Element([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr) \/ Element([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux131))
DISCRETE aux133 #(-1 + tlr)
{0..2}
BOOL aux134 #(Element([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr) \/ Element([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux133))
DISCRETE aux135 #(-5 + tlc + 4*tlr)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux135, [0,2,4,6,8,10])
**VARIABLES**
DISCRETE aux136 #(-5 + tlc + 4*tlr)
{0..10}
**CONSTRAINTS**
w-inintervalset(aux136, [0,2,4,6,8,10])
**VARIABLES**
BOOL aux137 #(loop_FunctionND_00001_00000_00000=q)
BOOL aux138 #(loop_FunctionND_00001_00000_00001=q)
BOOL aux139 #(loop_FunctionND_00001_00000_00002=q)
BOOL aux140 #(loop_FunctionND_00001_00000_00003=q)
BOOL aux141 #(q=loop_FunctionND_00001_00001_00000)
BOOL aux142 #(q=loop_FunctionND_00001_00001_00001)
BOOL aux143 #(q=loop_FunctionND_00001_00001_00002)
BOOL aux144 #(q=loop_FunctionND_00001_00001_00003)
BOOL aux145 #(q=loop_FunctionND_00001_00002_00000)
BOOL aux146 #(q=loop_FunctionND_00001_00002_00001)
BOOL aux147 #(q=loop_FunctionND_00001_00002_00002)
BOOL aux148 #(q=loop_FunctionND_00001_00002_00003)
BOOL aux149 #(loop_FunctionND_00001_00003_00000=q)
BOOL aux150 #(loop_FunctionND_00001_00003_00001=q)
BOOL aux151 #(loop_FunctionND_00001_00003_00002=q)
BOOL aux152 #(loop_FunctionND_00001_00003_00003=q)
BOOL aux153 #(loop_FunctionND_00002_00000_00000=q)
BOOL aux154 #(loop_FunctionND_00002_00000_00001=q)
BOOL aux155 #(loop_FunctionND_00002_00000_00002=q)
BOOL aux156 #(loop_FunctionND_00002_00000_00003=q)
BOOL aux157 #(q=loop_FunctionND_00002_00001_00000)
BOOL aux158 #(q=loop_FunctionND_00002_00001_00001)
BOOL aux159 #(q=loop_FunctionND_00002_00001_00002)
BOOL aux160 #(q=loop_FunctionND_00002_00001_00003)
BOOL aux161 #(q=loop_FunctionND_00002_00002_00000)
BOOL aux162 #(q=loop_FunctionND_00002_00002_00001)
BOOL aux163 #(q=loop_FunctionND_00002_00002_00002)
BOOL aux164 #(q=loop_FunctionND_00002_00002_00003)
BOOL aux165 #(loop_FunctionND_00002_00003_00000=q)
BOOL aux166 #(loop_FunctionND_00002_00003_00001=q)
BOOL aux167 #(loop_FunctionND_00002_00003_00002=q)
BOOL aux168 #(loop_FunctionND_00002_00003_00003=q)
DISCRETE aux169 #(loop_FunctionND_00001_00000_00000 - loop_FunctionND_00001_00000_00001)
{-24..24}
DISCRETE aux170 #(loop_FunctionND_00001_00000_00000 - loop_FunctionND_00001_00000_00001)
{-24..24}
DISCRETE aux171 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00001_00000_00002)
{-24..24}
DISCRETE aux172 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00001_00000_00002)
{-24..24}
DISCRETE aux173 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00001_00000_00003)
{-24..24}
DISCRETE aux174 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00001_00000_00003)
{-24..24}
DISCRETE aux175 #(loop_FunctionND_00001_00001_00000 - loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux176 #(loop_FunctionND_00001_00001_00000 - loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux177 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux178 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux179 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux180 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux181 #(loop_FunctionND_00001_00002_00000 - loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux182 #(loop_FunctionND_00001_00002_00000 - loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux183 #(loop_FunctionND_00001_00002_00001 - loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux184 #(loop_FunctionND_00001_00002_00001 - loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux185 #(loop_FunctionND_00001_00002_00002 - loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux186 #(loop_FunctionND_00001_00002_00002 - loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux187 #(loop_FunctionND_00001_00003_00000 - loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux188 #(loop_FunctionND_00001_00003_00000 - loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux189 #(loop_FunctionND_00001_00003_00001 - loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux190 #(loop_FunctionND_00001_00003_00001 - loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux191 #(loop_FunctionND_00001_00003_00002 - loop_FunctionND_00001_00003_00003)
{-24..24}
DISCRETE aux192 #(loop_FunctionND_00001_00003_00002 - loop_FunctionND_00001_00003_00003)
{-24..24}
DISCRETE aux193 #(loop_FunctionND_00002_00000_00000 - loop_FunctionND_00002_00001_00000)
{-24..24}
DISCRETE aux194 #(loop_FunctionND_00002_00000_00000 - loop_FunctionND_00002_00001_00000)
{-24..24}
DISCRETE aux195 #(loop_FunctionND_00002_00000_00001 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux196 #(loop_FunctionND_00002_00000_00001 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux197 #(loop_FunctionND_00002_00000_00002 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux198 #(loop_FunctionND_00002_00000_00002 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux199 #(loop_FunctionND_00002_00000_00003 - loop_FunctionND_00002_00001_00003)
{-24..24}
DISCRETE aux200 #(loop_FunctionND_00002_00000_00003 - loop_FunctionND_00002_00001_00003)
{-24..24}
DISCRETE aux201 #(loop_FunctionND_00002_00001_00000 - loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux202 #(loop_FunctionND_00002_00001_00000 - loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux203 #(loop_FunctionND_00002_00001_00001 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux204 #(loop_FunctionND_00002_00001_00001 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux205 #(loop_FunctionND_00002_00001_00002 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux206 #(loop_FunctionND_00002_00001_00002 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux207 #(loop_FunctionND_00002_00001_00003 - loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux208 #(loop_FunctionND_00002_00001_00003 - loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux209 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux210 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux211 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux212 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux213 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux214 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux215 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux216 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux217 #( - loop_FunctionND_00002_00001_00001 + loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux218 #( - loop_FunctionND_00002_00001_00001 + loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux219 #( - loop_FunctionND_00002_00001_00002 + loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux220 #( - loop_FunctionND_00002_00001_00002 + loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux221 #( - loop_FunctionND_00002_00001_00003 + loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux222 #( - loop_FunctionND_00002_00001_00003 + loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux223 #( - loop_FunctionND_00002_00002_00001 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux224 #( - loop_FunctionND_00002_00002_00001 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux225 #( - loop_FunctionND_00002_00002_00002 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux226 #( - loop_FunctionND_00002_00002_00002 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux227 #( - loop_FunctionND_00002_00002_00003 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux228 #( - loop_FunctionND_00002_00002_00003 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux229 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux230 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux231 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux232 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux233 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00001_00003_00003)
{-24..24}
DISCRETE aux234 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00001_00003_00003)
{-24..24}
DISCRETE aux235 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00002_00001_00000)
{-24..24}
DISCRETE aux236 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00002_00001_00000)
{-24..24}
DISCRETE aux237 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux238 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux239 #(loop_FunctionND_00001_00000_00003 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux240 #(loop_FunctionND_00001_00000_00003 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux241 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux242 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00002_00002_00000)
{-24..24}
DISCRETE aux243 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux244 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux245 #(loop_FunctionND_00001_00001_00003 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux246 #(loop_FunctionND_00001_00001_00003 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux247 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux248 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux249 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux250 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux251 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux252 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux253 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux254 #(loop_FunctionND_00001_00000_00001 - loop_FunctionND_00002_00001_00001)
{-24..24}
DISCRETE aux255 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux256 #(loop_FunctionND_00001_00000_00002 - loop_FunctionND_00002_00001_00002)
{-24..24}
DISCRETE aux257 #(loop_FunctionND_00001_00000_00003 - loop_FunctionND_00002_00001_00003)
{-24..24}
DISCRETE aux258 #(loop_FunctionND_00001_00000_00003 - loop_FunctionND_00002_00001_00003)
{-24..24}
DISCRETE aux259 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux260 #(loop_FunctionND_00001_00001_00001 - loop_FunctionND_00002_00002_00001)
{-24..24}
DISCRETE aux261 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux262 #(loop_FunctionND_00001_00001_00002 - loop_FunctionND_00002_00002_00002)
{-24..24}
DISCRETE aux263 #(loop_FunctionND_00001_00001_00003 - loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux264 #(loop_FunctionND_00001_00001_00003 - loop_FunctionND_00002_00002_00003)
{-24..24}
DISCRETE aux265 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux266 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux267 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux268 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux269 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux270 #( - loop_FunctionND_00002_00003_00003 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux271 #( - loop_FunctionND_00002_00001_00000 + loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux272 #( - loop_FunctionND_00002_00001_00000 + loop_FunctionND_00001_00001_00001)
{-24..24}
DISCRETE aux273 #( - loop_FunctionND_00002_00001_00001 + loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux274 #( - loop_FunctionND_00002_00001_00001 + loop_FunctionND_00001_00001_00002)
{-24..24}
DISCRETE aux275 #( - loop_FunctionND_00002_00001_00002 + loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux276 #( - loop_FunctionND_00002_00001_00002 + loop_FunctionND_00001_00001_00003)
{-24..24}
DISCRETE aux277 #( - loop_FunctionND_00002_00002_00000 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux278 #( - loop_FunctionND_00002_00002_00000 + loop_FunctionND_00001_00002_00001)
{-24..24}
DISCRETE aux279 #( - loop_FunctionND_00002_00002_00001 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux280 #( - loop_FunctionND_00002_00002_00001 + loop_FunctionND_00001_00002_00002)
{-24..24}
DISCRETE aux281 #( - loop_FunctionND_00002_00002_00002 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux282 #( - loop_FunctionND_00002_00002_00002 + loop_FunctionND_00001_00002_00003)
{-24..24}
DISCRETE aux283 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux284 #( - loop_FunctionND_00002_00003_00000 + loop_FunctionND_00001_00003_00001)
{-24..24}
DISCRETE aux285 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux286 #( - loop_FunctionND_00002_00003_00001 + loop_FunctionND_00001_00003_00002)
{-24..24}
DISCRETE aux287 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00003_00003)
{-24..24}
DISCRETE aux288 #( - loop_FunctionND_00002_00003_00002 + loop_FunctionND_00001_00003_00003)
{-24..24}
BOOL aux289 #(edges_00001_00000_00001 \/ edges_00002_00001_00000)
BOOL aux290 #(edges_00001_00000_00002 \/ edges_00002_00001_00001)
BOOL aux291 #(edges_00001_00000_00003 \/ edges_00002_00001_00002)
BOOL aux292 #(edges_00001_00001_00001 \/ edges_00002_00002_00000)
BOOL aux293 #(edges_00001_00001_00002 \/ edges_00002_00002_00001)
BOOL aux294 #(edges_00001_00001_00003 \/ edges_00002_00002_00002)
DISCRETE aux295 #(-1 + tlr)
{0..2}
BOOL aux296 #(Element([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr) \/ Element([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux295))
DISCRETE aux297 #(-1 + tlr)
{0..2}
BOOL aux298 #(Element([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr) \/ Element([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux297))
DISCRETE aux299 #(1 + loop_FunctionND_00001_00001_00000)
{1..25}
DISCRETE aux300 #(edges_00001_00001_00000 * aux299)
{0..25}
DISCRETE aux301 #(1 + loop_FunctionND_00001_00001_00001)
{1..25}
DISCRETE aux302 #(edges_00001_00001_00001 * aux301)
{0..25}
DISCRETE aux303 #(1 + loop_FunctionND_00001_00001_00002)
{1..25}
DISCRETE aux304 #(edges_00001_00001_00002 * aux303)
{0..25}
DISCRETE aux305 #(1 + loop_FunctionND_00001_00001_00003)
{1..25}
DISCRETE aux306 #(edges_00001_00001_00003 * aux305)
{0..25}
DISCRETE aux307 #(loop_FunctionND_00002_00000_00000 + 1)
{1..25}
DISCRETE aux308 #(aux307 * edges_00002_00000_00000)
{0..25}
DISCRETE aux309 #(loop_FunctionND_00002_00000_00001 + 1)
{1..25}
DISCRETE aux310 #(aux309 * edges_00002_00000_00001)
{0..25}
DISCRETE aux311 #(loop_FunctionND_00002_00000_00002 + 1)
{1..25}
DISCRETE aux312 #(aux311 * edges_00002_00000_00002)
{0..25}
DISCRETE aux313 #(loop_FunctionND_00002_00000_00003 + 1)
{1..25}
DISCRETE aux314 #(aux313 * edges_00002_00000_00003)
{0..25}
DISCRETE aux315 #(loop_FunctionND_00001_00003_00000 + 1)
{1..25}
DISCRETE aux316 #(aux315 * edges_00001_00003_00000)
{0..25}
DISCRETE aux317 #(loop_FunctionND_00001_00003_00001 + 1)
{1..25}
DISCRETE aux318 #(aux317 * edges_00001_00003_00001)
{0..25}
DISCRETE aux319 #(loop_FunctionND_00001_00003_00002 + 1)
{1..25}
DISCRETE aux320 #(aux319 * edges_00001_00003_00002)
{0..25}
DISCRETE aux321 #(loop_FunctionND_00001_00003_00003 + 1)
{1..25}
DISCRETE aux322 #(aux321 * edges_00001_00003_00003)
{0..25}
DISCRETE aux323 #(1 + loop_FunctionND_00002_00002_00000)
{1..25}
DISCRETE aux324 #(edges_00002_00002_00000 * aux323)
{0..25}
DISCRETE aux325 #(1 + loop_FunctionND_00002_00002_00001)
{1..25}
DISCRETE aux326 #(edges_00002_00002_00001 * aux325)
{0..25}
DISCRETE aux327 #(1 + loop_FunctionND_00002_00002_00002)
{1..25}
DISCRETE aux328 #(edges_00002_00002_00002 * aux327)
{0..25}
DISCRETE aux329 #(1 + loop_FunctionND_00002_00002_00003)
{1..25}
DISCRETE aux330 #(edges_00002_00002_00003 * aux329)
{0..25}
DISCRETE aux331 #(loop_FunctionND_00002_00003_00000 + 1)
{1..25}
DISCRETE aux332 #(aux331 * edges_00002_00003_00000)
{0..25}
DISCRETE aux333 #(loop_FunctionND_00002_00003_00001 + 1)
{1..25}
DISCRETE aux334 #(aux333 * edges_00002_00003_00001)
{0..25}
DISCRETE aux335 #(loop_FunctionND_00002_00003_00002 + 1)
{1..25}
DISCRETE aux336 #(aux335 * edges_00002_00003_00002)
{0..25}
DISCRETE aux337 #(loop_FunctionND_00002_00003_00003 + 1)
{1..25}
DISCRETE aux338 #(aux337 * edges_00002_00003_00003)
{0..25}
DISCRETE aux339 #(1 + loop_FunctionND_00001_00002_00000)
{1..25}
DISCRETE aux340 #(edges_00001_00002_00000 * aux339)
{0..25}
DISCRETE aux341 #(1 + loop_FunctionND_00001_00002_00001)
{1..25}
DISCRETE aux342 #(edges_00001_00002_00001 * aux341)
{0..25}
DISCRETE aux343 #(1 + loop_FunctionND_00001_00002_00002)
{1..25}
DISCRETE aux344 #(edges_00001_00002_00002 * aux343)
{0..25}
DISCRETE aux345 #(1 + loop_FunctionND_00001_00002_00003)
{1..25}
DISCRETE aux346 #(edges_00001_00002_00003 * aux345)
{0..25}
DISCRETE aux347 #(1 + loop_FunctionND_00002_00001_00000)
{1..25}
DISCRETE aux348 #(aux347 * edges_00002_00001_00000)
{0..25}
DISCRETE aux349 #(1 + loop_FunctionND_00002_00001_00001)
{1..25}
DISCRETE aux350 #(aux349 * edges_00002_00001_00001)
{0..25}
DISCRETE aux351 #(1 + loop_FunctionND_00002_00001_00002)
{1..25}
DISCRETE aux352 #(aux351 * edges_00002_00001_00002)
{0..25}
DISCRETE aux353 #(1 + loop_FunctionND_00002_00001_00003)
{1..25}
DISCRETE aux354 #(aux353 * edges_00002_00001_00003)
{0..25}
DISCRETE aux355 #(loop_FunctionND_00001_00000_00000 + 1)
{1..25}
DISCRETE aux356 #(aux355 * edges_00001_00000_00000)
{0..25}
DISCRETE aux357 #(loop_FunctionND_00001_00000_00001 + 1)
{1..25}
DISCRETE aux358 #(aux357 * edges_00001_00000_00001)
{0..25}
DISCRETE aux359 #(loop_FunctionND_00001_00000_00002 + 1)
{1..25}
DISCRETE aux360 #(aux359 * edges_00001_00000_00002)
{0..25}
DISCRETE aux361 #(loop_FunctionND_00001_00000_00003 + 1)
{1..25}
DISCRETE aux362 #(aux361 * edges_00001_00000_00003)
{0..25}
**TUPLELIST**
grid 3 3
0 0 0 
0 3 0 
3 0 3 
**VARIABLES**
ALIAS grid[3,3]=[[0, 0, 0], [0, 3, 0], [3, 0, 3]]
**SEARCH**
PRINT[[edges_00001_00000_00000],[edges_00001_00000_00001],[edges_00001_00000_00002],[edges_00001_00000_00003],[edges_00001_00001_00000],[edges_00001_00001_00001],[edges_00001_00001_00002],[edges_00001_00001_00003],[edges_00001_00002_00000],[edges_00001_00002_00001],[edges_00001_00002_00002],[edges_00001_00002_00003],[edges_00001_00003_00000],[edges_00001_00003_00001],[edges_00001_00003_00002],[edges_00001_00003_00003],[edges_00002_00000_00000],[edges_00002_00000_00001],[edges_00002_00000_00002],[edges_00002_00000_00003],[edges_00002_00001_00000],[edges_00002_00001_00001],[edges_00002_00001_00002],[edges_00002_00001_00003],[edges_00002_00002_00000],[edges_00002_00002_00001],[edges_00002_00002_00002],[edges_00002_00002_00003],[edges_00002_00003_00000],[edges_00002_00003_00001],[edges_00002_00003_00002],[edges_00002_00003_00003],[q],[loop_FunctionND_00001_00000_00000],[loop_FunctionND_00001_00000_00001],[loop_FunctionND_00001_00000_00002],[loop_FunctionND_00001_00000_00003],[loop_FunctionND_00001_00001_00000],[loop_FunctionND_00001_00001_00001],[loop_FunctionND_00001_00001_00002],[loop_FunctionND_00001_00001_00003],[loop_FunctionND_00001_00002_00000],[loop_FunctionND_00001_00002_00001],[loop_FunctionND_00001_00002_00002],[loop_FunctionND_00001_00002_00003],[loop_FunctionND_00001_00003_00000],[loop_FunctionND_00001_00003_00001],[loop_FunctionND_00001_00003_00002],[loop_FunctionND_00001_00003_00003],[loop_FunctionND_00002_00000_00000],[loop_FunctionND_00002_00000_00001],[loop_FunctionND_00002_00000_00002],[loop_FunctionND_00002_00000_00003],[loop_FunctionND_00002_00001_00000],[loop_FunctionND_00002_00001_00001],[loop_FunctionND_00002_00001_00002],[loop_FunctionND_00002_00001_00003],[loop_FunctionND_00002_00002_00000],[loop_FunctionND_00002_00002_00001],[loop_FunctionND_00002_00002_00002],[loop_FunctionND_00002_00002_00003],[loop_FunctionND_00002_00003_00000],[loop_FunctionND_00002_00003_00001],[loop_FunctionND_00002_00003_00002],[loop_FunctionND_00002_00003_00003],[tlr],[tlc],[conjure_aux1],[conjure_aux2]]
**CONSTRAINTS**
reify(watched-or({w-literal(edges_00001_00000_00001,1),w-literal(edges_00002_00001_00000,1)}), aux85)
reify(watched-or({w-literal(edges_00001_00000_00002,1),w-literal(edges_00002_00001_00001,1)}), aux86)
reify(watched-or({w-literal(edges_00001_00000_00003,1),w-literal(edges_00002_00001_00002,1)}), aux87)
reify(watched-or({w-literal(edges_00001_00002_00001,1),w-literal(edges_00002_00003_00000,1)}), aux88)
reify(watched-or({w-literal(edges_00001_00002_00002,1),w-literal(edges_00002_00003_00001,1)}), aux89)
reify(watched-or({w-literal(edges_00001_00002_00003,1),w-literal(edges_00002_00003_00002,1)}), aux90)
reify(watched-or({w-literal(edges_00001_00001_00001,1),w-literal(edges_00002_00002_00000,1)}), aux91)
reify(watched-or({w-literal(edges_00001_00001_00002,1),w-literal(edges_00002_00002_00001,1)}), aux92)
reify(watched-or({w-literal(edges_00001_00001_00003,1),w-literal(edges_00002_00002_00002,1)}), aux93)
reify(watched-or({w-literal(edges_00001_00000_00001,1),w-literal(edges_00002_00001_00000,1)}), aux94)
reify(watched-or({w-literal(edges_00001_00000_00002,1),w-literal(edges_00002_00001_00001,1)}), aux95)
reify(watched-or({w-literal(edges_00001_00000_00003,1),w-literal(edges_00002_00001_00002,1)}), aux96)
reify(watched-or({w-literal(edges_00001_00002_00001,1),w-literal(edges_00002_00003_00000,1)}), aux97)
reify(watched-or({w-literal(edges_00001_00002_00002,1),w-literal(edges_00002_00003_00001,1)}), aux98)
reify(watched-or({w-literal(edges_00001_00002_00003,1),w-literal(edges_00002_00003_00002,1)}), aux99)
reify(watched-or({w-literal(edges_00001_00001_00001,1),w-literal(edges_00002_00002_00000,1)}), aux100)
reify(watched-or({w-literal(edges_00001_00001_00002,1),w-literal(edges_00002_00002_00001,1)}), aux101)
reify(watched-or({w-literal(edges_00001_00001_00003,1),w-literal(edges_00002_00002_00002,1)}), aux102)
reify(sumleq([aux100,aux101,aux102,aux94,aux95,aux96,aux97,aux98,aux99],0), aux103)
reify(watched-or({w-literal(edges_00001_00000_00001,1),w-literal(edges_00002_00001_00000,1)}), aux104)
reify(watched-or({w-literal(edges_00001_00000_00002,1),w-literal(edges_00002_00001_00001,1)}), aux105)
reify(watched-or({w-literal(edges_00001_00000_00003,1),w-literal(edges_00002_00001_00002,1)}), aux106)
reify(watched-or({w-literal(edges_00001_00002_00001,1),w-literal(edges_00002_00003_00000,1)}), aux107)
reify(watched-or({w-literal(edges_00001_00002_00002,1),w-literal(edges_00002_00003_00001,1)}), aux108)
reify(watched-or({w-literal(edges_00001_00002_00003,1),w-literal(edges_00002_00003_00002,1)}), aux109)
reify(watched-or({w-literal(edges_00001_00001_00001,1),w-literal(edges_00002_00002_00000,1)}), aux110)
reify(watched-or({w-literal(edges_00001_00001_00002,1),w-literal(edges_00002_00002_00001,1)}), aux111)
reify(watched-or({w-literal(edges_00001_00001_00003,1),w-literal(edges_00002_00002_00002,1)}), aux112)
reify(watched-or({watchelement([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr, 1),watchelement([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux116, 1)}), aux117)
reify(watched-or({watchelement([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr, 1),watchelement([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux118, 1)}), aux119)
reify(watched-or({watchelement([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr, 1),watchelement([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux120, 1)}), aux121)
reify(watched-or({watchelement([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr, 1),watchelement([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux122, 1)}), aux123)
reify(watched-or({watchelement([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr, 1),watchelement([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux124, 1)}), aux125)
reify(watched-or({watchelement([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr, 1),watchelement([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux126, 1)}), aux127)
reify(sumleq([aux123,aux125,aux127],0), aux128)
reify(watched-or({watchelement([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr, 1),watchelement([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux129, 1)}), aux130)
reify(watched-or({watchelement([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr, 1),watchelement([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux131, 1)}), aux132)
reify(watched-or({watchelement([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr, 1),watchelement([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux133, 1)}), aux134)
reify(gaceq(loop_FunctionND_00001_00000_00000,q), aux137)
reify(gaceq(loop_FunctionND_00001_00000_00001,q), aux138)
reify(gaceq(loop_FunctionND_00001_00000_00002,q), aux139)
reify(gaceq(loop_FunctionND_00001_00000_00003,q), aux140)
reify(gaceq(q,loop_FunctionND_00001_00001_00000), aux141)
reify(gaceq(q,loop_FunctionND_00001_00001_00001), aux142)
reify(gaceq(q,loop_FunctionND_00001_00001_00002), aux143)
reify(gaceq(q,loop_FunctionND_00001_00001_00003), aux144)
reify(gaceq(q,loop_FunctionND_00001_00002_00000), aux145)
reify(gaceq(q,loop_FunctionND_00001_00002_00001), aux146)
reify(gaceq(q,loop_FunctionND_00001_00002_00002), aux147)
reify(gaceq(q,loop_FunctionND_00001_00002_00003), aux148)
reify(gaceq(loop_FunctionND_00001_00003_00000,q), aux149)
reify(gaceq(loop_FunctionND_00001_00003_00001,q), aux150)
reify(gaceq(loop_FunctionND_00001_00003_00002,q), aux151)
reify(gaceq(loop_FunctionND_00001_00003_00003,q), aux152)
reify(gaceq(loop_FunctionND_00002_00000_00000,q), aux153)
reify(gaceq(loop_FunctionND_00002_00000_00001,q), aux154)
reify(gaceq(loop_FunctionND_00002_00000_00002,q), aux155)
reify(gaceq(loop_FunctionND_00002_00000_00003,q), aux156)
reify(gaceq(q,loop_FunctionND_00002_00001_00000), aux157)
reify(gaceq(q,loop_FunctionND_00002_00001_00001), aux158)
reify(gaceq(q,loop_FunctionND_00002_00001_00002), aux159)
reify(gaceq(q,loop_FunctionND_00002_00001_00003), aux160)
reify(gaceq(q,loop_FunctionND_00002_00002_00000), aux161)
reify(gaceq(q,loop_FunctionND_00002_00002_00001), aux162)
reify(gaceq(q,loop_FunctionND_00002_00002_00002), aux163)
reify(gaceq(q,loop_FunctionND_00002_00002_00003), aux164)
reify(gaceq(loop_FunctionND_00002_00003_00000,q), aux165)
reify(gaceq(loop_FunctionND_00002_00003_00001,q), aux166)
reify(gaceq(loop_FunctionND_00002_00003_00002,q), aux167)
reify(gaceq(loop_FunctionND_00002_00003_00003,q), aux168)
reify(watched-or({w-literal(edges_00001_00000_00001,1),w-literal(edges_00002_00001_00000,1)}), aux289)
reify(watched-or({w-literal(edges_00001_00000_00002,1),w-literal(edges_00002_00001_00001,1)}), aux290)
reify(watched-or({w-literal(edges_00001_00000_00003,1),w-literal(edges_00002_00001_00002,1)}), aux291)
reify(watched-or({w-literal(edges_00001_00001_00001,1),w-literal(edges_00002_00002_00000,1)}), aux292)
reify(watched-or({w-literal(edges_00001_00001_00002,1),w-literal(edges_00002_00002_00001,1)}), aux293)
reify(watched-or({w-literal(edges_00001_00001_00003,1),w-literal(edges_00002_00002_00002,1)}), aux294)
reify(watched-or({watchelement([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr, 1),watchelement([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux295, 1)}), aux296)
reify(watched-or({watchelement([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr, 1),watchelement([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux297, 1)}), aux298)
product(edges_00001_00001_00000, aux299, aux300)
product(edges_00001_00001_00001, aux301, aux302)
product(edges_00001_00001_00002, aux303, aux304)
product(edges_00001_00001_00003, aux305, aux306)
product(aux307, edges_00002_00000_00000, aux308)
product(aux309, edges_00002_00000_00001, aux310)
product(aux311, edges_00002_00000_00002, aux312)
product(aux313, edges_00002_00000_00003, aux314)
product(aux315, edges_00001_00003_00000, aux316)
product(aux317, edges_00001_00003_00001, aux318)
product(aux319, edges_00001_00003_00002, aux320)
product(aux321, edges_00001_00003_00003, aux322)
product(edges_00002_00002_00000, aux323, aux324)
product(edges_00002_00002_00001, aux325, aux326)
product(edges_00002_00002_00002, aux327, aux328)
product(edges_00002_00002_00003, aux329, aux330)
product(aux331, edges_00002_00003_00000, aux332)
product(aux333, edges_00002_00003_00001, aux334)
product(aux335, edges_00002_00003_00002, aux336)
product(aux337, edges_00002_00003_00003, aux338)
product(edges_00001_00002_00000, aux339, aux340)
product(edges_00001_00002_00001, aux341, aux342)
product(edges_00001_00002_00002, aux343, aux344)
product(edges_00001_00002_00003, aux345, aux346)
product(aux347, edges_00002_00001_00000, aux348)
product(aux349, edges_00002_00001_00001, aux350)
product(aux351, edges_00002_00001_00002, aux352)
product(aux353, edges_00002_00001_00003, aux354)
product(aux355, edges_00001_00000_00000, aux356)
product(aux357, edges_00001_00000_00001, aux358)
product(aux359, edges_00001_00000_00002, aux360)
product(aux361, edges_00001_00000_00003, aux362)
watched-or({watched-and({w-literal(conjure_aux1,3),watched-or({w-literal(edges_00001_00002_00001,1),w-literal(edges_00002_00003_00000,1)})}),watched-and({w-literal(conjure_aux1,3),watched-or({w-literal(edges_00001_00002_00002,1),w-literal(edges_00002_00003_00001,1)})}),watched-and({w-literal(conjure_aux1,3),watched-or({w-literal(edges_00001_00002_00003,1),w-literal(edges_00002_00003_00002,1)})}),watched-and({watched-or({w-literal(edges_00001_00000_00001,1),w-literal(edges_00002_00001_00000,1)}),w-literal(conjure_aux1,1)}),watched-and({watched-or({w-literal(edges_00001_00000_00002,1),w-literal(edges_00002_00001_00001,1)}),w-literal(conjure_aux1,1)}),watched-and({watched-or({w-literal(edges_00001_00000_00003,1),w-literal(edges_00002_00001_00002,1)}),w-literal(conjure_aux1,1)}),watched-and({w-literal(conjure_aux1,2),watched-or({w-literal(edges_00001_00001_00001,1),w-literal(edges_00002_00002_00000,1)})}),watched-and({w-literal(conjure_aux1,2),watched-or({w-literal(edges_00001_00001_00002,1),w-literal(edges_00002_00002_00001,1)})}),watched-and({w-literal(conjure_aux1,2),watched-or({w-literal(edges_00001_00001_00003,1),w-literal(edges_00002_00002_00002,1)})}),sumleq([aux85,aux86,aux87,aux88,aux89,aux90,aux91,aux92,aux93],0)})
reifyimply(w-literal(conjure_aux1,1), aux103)
gaceq(conjure_aux1,tlr)
sumgeq([aux104,aux105,aux106,aux107,aux108,aux109,aux110,aux111,aux112],1)
watched-or({watched-and({watched-or({watchelement([edges_00002_00000_00002, edges_00002_00001_00002, edges_00002_00002_00002, edges_00002_00003_00002], tlr, 1),watchelement([edges_00001_00000_00003, edges_00001_00001_00003, edges_00001_00002_00003], aux113, 1)}),w-literal(conjure_aux2,3)}),watched-and({watched-or({watchelement([edges_00002_00000_00000, edges_00002_00001_00000, edges_00002_00002_00000, edges_00002_00003_00000], tlr, 1),watchelement([edges_00001_00000_00001, edges_00001_00001_00001, edges_00001_00002_00001], aux114, 1)}),w-literal(conjure_aux2,1)}),watched-and({watched-or({watchelement([edges_00002_00000_00001, edges_00002_00001_00001, edges_00002_00002_00001, edges_00002_00003_00001], tlr, 1),watchelement([edges_00001_00000_00002, edges_00001_00001_00002, edges_00001_00002_00002], aux115, 1)}),w-literal(conjure_aux2,2)}),sumleq([aux117,aux119,aux121],0)})
reifyimply(w-literal(conjure_aux2,1), aux128)
gaceq(conjure_aux2,tlc)
sumgeq([aux130,aux132,aux134],1)
watchelement([loop_FunctionND_00002_00001_00000, loop_FunctionND_00002_00001_00001, loop_FunctionND_00002_00001_00002, loop_FunctionND_00002_00001_00003, loop_FunctionND_00002_00002_00000, loop_FunctionND_00002_00002_00001, loop_FunctionND_00002_00002_00002, loop_FunctionND_00002_00002_00003, loop_FunctionND_00002_00003_00000, loop_FunctionND_00002_00003_00001, loop_FunctionND_00002_00003_00002], aux135, 0)
watchelement([loop_FunctionND_00001_00000_00001, loop_FunctionND_00001_00000_00002, loop_FunctionND_00001_00000_00003, loop_FunctionND_00001_00001_00000, loop_FunctionND_00001_00001_00001, loop_FunctionND_00001_00001_00002, loop_FunctionND_00001_00001_00003, loop_FunctionND_00001_00002_00000, loop_FunctionND_00001_00002_00001, loop_FunctionND_00001_00002_00002, loop_FunctionND_00001_00002_00003], aux136, 1)
w-literal(edges_00001_00000_00000,0)
w-literal(edges_00001_00001_00000,0)
w-literal(edges_00001_00002_00000,0)
w-literal(edges_00001_00003_00000,0)
w-literal(edges_00002_00000_00000,0)
w-literal(edges_00002_00000_00001,0)
w-literal(edges_00002_00000_00002,0)
w-literal(edges_00002_00000_00003,0)
watched-or({sumleq([edges_00002_00000_00000,edges_00001_00000_00000,edges_00001_00000_00001,edges_00002_00001_00000],0),watched-and({sumleq([edges_00002_00000_00000,edges_00001_00000_00000,edges_00001_00000_00001,edges_00002_00001_00000],2),sumgeq([edges_00002_00000_00000,edges_00001_00000_00000,edges_00001_00000_00001,edges_00002_00001_00000],2)})})
watched-or({sumleq([edges_00002_00000_00001,edges_00001_00000_00001,edges_00001_00000_00002,edges_00002_00001_00001],0),watched-and({sumleq([edges_00002_00000_00001,edges_00001_00000_00001,edges_00001_00000_00002,edges_00002_00001_00001],2),sumgeq([edges_00002_00000_00001,edges_00001_00000_00001,edges_00001_00000_00002,edges_00002_00001_00001],2)})})
watched-or({sumleq([edges_00002_00000_00002,edges_00001_00000_00002,edges_00001_00000_00003,edges_00002_00001_00002],0),watched-and({sumleq([edges_00002_00000_00002,edges_00001_00000_00002,edges_00001_00000_00003,edges_00002_00001_00002],2),sumgeq([edges_00002_00000_00002,edges_00001_00000_00002,edges_00001_00000_00003,edges_00002_00001_00002],2)})})
watched-or({sumleq([edges_00001_00001_00000,edges_00001_00001_00001,edges_00002_00002_00000,edges_00002_00001_00000],0),watched-and({sumleq([edges_00001_00001_00000,edges_00001_00001_00001,edges_00002_00002_00000,edges_00002_00001_00000],2),sumgeq([edges_00001_00001_00000,edges_00001_00001_00001,edges_00002_00002_00000,edges_00002_00001_00000],2)})})
watched-or({sumleq([edges_00001_00001_00001,edges_00001_00001_00002,edges_00002_00002_00001,edges_00002_00001_00001],0),watched-and({sumleq([edges_00001_00001_00001,edges_00001_00001_00002,edges_00002_00002_00001,edges_00002_00001_00001],2),sumgeq([edges_00001_00001_00001,edges_00001_00001_00002,edges_00002_00002_00001,edges_00002_00001_00001],2)})})
watched-or({sumleq([edges_00001_00001_00002,edges_00001_00001_00003,edges_00002_00002_00002,edges_00002_00001_00002],0),watched-and({sumleq([edges_00001_00001_00002,edges_00001_00001_00003,edges_00002_00002_00002,edges_00002_00001_00002],2),sumgeq([edges_00001_00001_00002,edges_00001_00001_00003,edges_00002_00002_00002,edges_00002_00001_00002],2)})})
watched-or({sumleq([edges_00002_00002_00000,edges_00001_00002_00000,edges_00001_00002_00001,edges_00002_00003_00000],0),watched-and({sumleq([edges_00002_00002_00000,edges_00001_00002_00000,edges_00001_00002_00001,edges_00002_00003_00000],2),sumgeq([edges_00002_00002_00000,edges_00001_00002_00000,edges_00001_00002_00001,edges_00002_00003_00000],2)})})
watched-or({sumleq([edges_00002_00002_00001,edges_00001_00002_00001,edges_00001_00002_00002,edges_00002_00003_00001],0),watched-and({sumleq([edges_00002_00002_00001,edges_00001_00002_00001,edges_00001_00002_00002,edges_00002_00003_00001],2),sumgeq([edges_00002_00002_00001,edges_00001_00002_00001,edges_00001_00002_00002,edges_00002_00003_00001],2)})})
watched-or({sumleq([edges_00002_00002_00002,edges_00001_00002_00002,edges_00001_00002_00003,edges_00002_00003_00002],0),watched-and({sumleq([edges_00002_00002_00002,edges_00001_00002_00002,edges_00001_00002_00003,edges_00002_00003_00002],2),sumgeq([edges_00002_00002_00002,edges_00001_00002_00002,edges_00001_00002_00003,edges_00002_00003_00002],2)})})
watched-or({sumleq([edges_00002_00003_00000,edges_00001_00003_00000,edges_00001_00003_00001],0),watched-and({sumleq([edges_00002_00003_00000,edges_00001_00003_00000,edges_00001_00003_00001],2),sumgeq([edges_00002_00003_00000,edges_00001_00003_00000,edges_00001_00003_00001],2)})})
watched-or({sumleq([edges_00002_00003_00001,edges_00001_00003_00001,edges_00001_00003_00002],0),watched-and({sumleq([edges_00002_00003_00001,edges_00001_00003_00001,edges_00001_00003_00002],2),sumgeq([edges_00002_00003_00001,edges_00001_00003_00001,edges_00001_00003_00002],2)})})
watched-or({sumleq([edges_00002_00003_00002,edges_00001_00003_00002,edges_00001_00003_00003],0),watched-and({sumleq([edges_00002_00003_00002,edges_00001_00003_00002,edges_00001_00003_00003],2),sumgeq([edges_00002_00003_00002,edges_00001_00003_00002,edges_00001_00003_00003],2)})})
watched-or({sumleq([edges_00002_00000_00003,edges_00001_00000_00003,edges_00002_00001_00003],0),watched-and({sumleq([edges_00002_00000_00003,edges_00001_00000_00003,edges_00002_00001_00003],2),sumgeq([edges_00002_00000_00003,edges_00001_00000_00003,edges_00002_00001_00003],2)})})
watched-or({sumleq([edges_00001_00001_00003,edges_00002_00002_00003,edges_00002_00001_00003],0),watched-and({sumleq([edges_00001_00001_00003,edges_00002_00002_00003,edges_00002_00001_00003],2),sumgeq([edges_00001_00001_00003,edges_00002_00002_00003,edges_00002_00001_00003],2)})})
watched-or({sumleq([edges_00002_00002_00003,edges_00001_00002_00003,edges_00002_00003_00003],0),watched-and({sumleq([edges_00002_00002_00003,edges_00001_00002_00003,edges_00002_00003_00003],2),sumgeq([edges_00002_00002_00003,edges_00001_00002_00003,edges_00002_00003_00003],2)})})
ineq(loop_FunctionND_00001_00000_00000, q, 0)
ineq(loop_FunctionND_00001_00000_00001, q, 0)
ineq(loop_FunctionND_00001_00000_00002, q, 0)
ineq(loop_FunctionND_00001_00000_00003, q, 0)
ineq(loop_FunctionND_00001_00001_00000, q, 0)
ineq(loop_FunctionND_00001_00001_00001, q, 0)
ineq(loop_FunctionND_00001_00001_00002, q, 0)
ineq(loop_FunctionND_00001_00001_00003, q, 0)
ineq(loop_FunctionND_00001_00002_00000, q, 0)
ineq(loop_FunctionND_00001_00002_00001, q, 0)
ineq(loop_FunctionND_00001_00002_00002, q, 0)
ineq(loop_FunctionND_00001_00002_00003, q, 0)
ineq(loop_FunctionND_00001_00003_00000, q, 0)
ineq(loop_FunctionND_00001_00003_00001, q, 0)
ineq(loop_FunctionND_00001_00003_00002, q, 0)
ineq(loop_FunctionND_00001_00003_00003, q, 0)
ineq(loop_FunctionND_00002_00000_00000, q, 0)
ineq(loop_FunctionND_00002_00000_00001, q, 0)
ineq(loop_FunctionND_00002_00000_00002, q, 0)
ineq(loop_FunctionND_00002_00000_00003, q, 0)
ineq(loop_FunctionND_00002_00001_00000, q, 0)
ineq(loop_FunctionND_00002_00001_00001, q, 0)
ineq(loop_FunctionND_00002_00001_00002, q, 0)
ineq(loop_FunctionND_00002_00001_00003, q, 0)
ineq(loop_FunctionND_00002_00002_00000, q, 0)
ineq(loop_FunctionND_00002_00002_00001, q, 0)
ineq(loop_FunctionND_00002_00002_00002, q, 0)
ineq(loop_FunctionND_00002_00002_00003, q, 0)
ineq(loop_FunctionND_00002_00003_00000, q, 0)
ineq(loop_FunctionND_00002_00003_00001, q, 0)
ineq(loop_FunctionND_00002_00003_00002, q, 0)
ineq(loop_FunctionND_00002_00003_00003, q, 0)
eq(!edges_00001_00000_00000, aux137)
eq(!edges_00001_00000_00001, aux138)
eq(!edges_00001_00000_00002, aux139)
eq(!edges_00001_00000_00003, aux140)
eq(aux141, !edges_00001_00001_00000)
eq(aux142, !edges_00001_00001_00001)
eq(aux143, !edges_00001_00001_00002)
eq(aux144, !edges_00001_00001_00003)
eq(aux145, !edges_00001_00002_00000)
eq(aux146, !edges_00001_00002_00001)
eq(aux147, !edges_00001_00002_00002)
eq(aux148, !edges_00001_00002_00003)
eq(!edges_00001_00003_00000, aux149)
eq(!edges_00001_00003_00001, aux150)
eq(!edges_00001_00003_00002, aux151)
eq(!edges_00001_00003_00003, aux152)
eq(aux153, !edges_00002_00000_00000)
eq(aux154, !edges_00002_00000_00001)
eq(aux155, !edges_00002_00000_00002)
eq(aux156, !edges_00002_00000_00003)
eq(aux157, !edges_00002_00001_00000)
eq(aux158, !edges_00002_00001_00001)
eq(aux159, !edges_00002_00001_00002)
eq(aux160, !edges_00002_00001_00003)
eq(aux161, !edges_00002_00002_00000)
eq(aux162, !edges_00002_00002_00001)
eq(aux163, !edges_00002_00002_00002)
eq(aux164, !edges_00002_00002_00003)
eq(!edges_00002_00003_00000, aux165)
eq(!edges_00002_00003_00001, aux166)
eq(!edges_00002_00003_00002, aux167)
eq(!edges_00002_00003_00003, aux168)
watched-or({w-literal(edges_00001_00000_00000,0),w-literal(edges_00001_00000_00001,0),abs(1, aux169),abs(aux25, aux170)})
watched-or({w-literal(edges_00001_00000_00001,0),w-literal(edges_00001_00000_00002,0),abs(1, aux171),abs(aux26, aux172)})
watched-or({w-literal(edges_00001_00000_00002,0),w-literal(edges_00001_00000_00003,0),abs(1, aux173),abs(aux27, aux174)})
watched-or({abs(1, aux175),abs(aux28, aux176),w-literal(edges_00001_00001_00000,0),w-literal(edges_00001_00001_00001,0)})
watched-or({abs(1, aux177),abs(aux29, aux178),w-literal(edges_00001_00001_00001,0),w-literal(edges_00001_00001_00002,0)})
watched-or({abs(1, aux179),abs(aux30, aux180),w-literal(edges_00001_00001_00002,0),w-literal(edges_00001_00001_00003,0)})
watched-or({abs(1, aux181),abs(aux31, aux182),w-literal(edges_00001_00002_00000,0),w-literal(edges_00001_00002_00001,0)})
watched-or({abs(1, aux183),abs(aux32, aux184),w-literal(edges_00001_00002_00001,0),w-literal(edges_00001_00002_00002,0)})
watched-or({abs(1, aux185),abs(aux33, aux186),w-literal(edges_00001_00002_00002,0),w-literal(edges_00001_00002_00003,0)})
watched-or({abs(1, aux187),abs(aux34, aux188),w-literal(edges_00001_00003_00000,0),w-literal(edges_00001_00003_00001,0)})
watched-or({abs(1, aux189),abs(aux35, aux190),w-literal(edges_00001_00003_00001,0),w-literal(edges_00001_00003_00002,0)})
watched-or({abs(1, aux191),abs(aux36, aux192),w-literal(edges_00001_00003_00002,0),w-literal(edges_00001_00003_00003,0)})
watched-or({abs(1, aux193),abs(aux37, aux194),w-literal(edges_00002_00001_00000,0),w-literal(edges_00002_00000_00000,0)})
watched-or({abs(1, aux195),abs(aux38, aux196),w-literal(edges_00002_00001_00001,0),w-literal(edges_00002_00000_00001,0)})
watched-or({abs(1, aux197),abs(aux39, aux198),w-literal(edges_00002_00001_00002,0),w-literal(edges_00002_00000_00002,0)})
watched-or({abs(1, aux199),abs(aux40, aux200),w-literal(edges_00002_00001_00003,0),w-literal(edges_00002_00000_00003,0)})
watched-or({w-literal(edges_00002_00001_00000,0),abs(1, aux201),abs(aux41, aux202),w-literal(edges_00002_00002_00000,0)})
watched-or({w-literal(edges_00002_00001_00001,0),abs(1, aux203),abs(aux42, aux204),w-literal(edges_00002_00002_00001,0)})
watched-or({w-literal(edges_00002_00001_00002,0),abs(1, aux205),abs(aux43, aux206),w-literal(edges_00002_00002_00002,0)})
watched-or({w-literal(edges_00002_00001_00003,0),abs(1, aux207),abs(aux44, aux208),w-literal(edges_00002_00002_00003,0)})
watched-or({abs(1, aux209),abs(aux45, aux210),w-literal(edges_00002_00002_00000,0),w-literal(edges_00002_00003_00000,0)})
watched-or({abs(1, aux211),abs(aux46, aux212),w-literal(edges_00002_00002_00001,0),w-literal(edges_00002_00003_00001,0)})
watched-or({abs(1, aux213),abs(aux47, aux214),w-literal(edges_00002_00002_00002,0),w-literal(edges_00002_00003_00002,0)})
watched-or({abs(1, aux215),abs(aux48, aux216),w-literal(edges_00002_00002_00003,0),w-literal(edges_00002_00003_00003,0)})
watched-or({abs(1, aux217),abs(aux49, aux218),w-literal(edges_00002_00001_00001,0),w-literal(edges_00001_00001_00001,0)})
watched-or({abs(1, aux219),abs(aux50, aux220),w-literal(edges_00002_00001_00002,0),w-literal(edges_00001_00001_00002,0)})
watched-or({abs(1, aux221),abs(aux51, aux222),w-literal(edges_00002_00001_00003,0),w-literal(edges_00001_00001_00003,0)})
watched-or({w-literal(edges_00002_00002_00001,0),w-literal(edges_00001_00002_00001,0),abs(1, aux223),abs(aux52, aux224)})
watched-or({w-literal(edges_00002_00002_00002,0),w-literal(edges_00001_00002_00002,0),abs(1, aux225),abs(aux53, aux226)})
watched-or({w-literal(edges_00002_00002_00003,0),w-literal(edges_00001_00002_00003,0),abs(1, aux227),abs(aux54, aux228)})
watched-or({abs(1, aux229),abs(aux55, aux230),w-literal(edges_00002_00003_00001,0),w-literal(edges_00001_00003_00001,0)})
watched-or({abs(1, aux231),abs(aux56, aux232),w-literal(edges_00002_00003_00002,0),w-literal(edges_00001_00003_00002,0)})
watched-or({abs(1, aux233),abs(aux57, aux234),w-literal(edges_00002_00003_00003,0),w-literal(edges_00001_00003_00003,0)})
watched-or({w-literal(edges_00001_00000_00001,0),w-literal(edges_00002_00001_00000,0),abs(1, aux235),abs(aux58, aux236)})
watched-or({w-literal(edges_00001_00000_00002,0),w-literal(edges_00002_00001_00001,0),abs(1, aux237),abs(aux59, aux238)})
watched-or({w-literal(edges_00001_00000_00003,0),w-literal(edges_00002_00001_00002,0),abs(1, aux239),abs(aux60, aux240)})
watched-or({w-literal(edges_00001_00001_00001,0),abs(1, aux241),abs(aux61, aux242),w-literal(edges_00002_00002_00000,0)})
watched-or({w-literal(edges_00001_00001_00002,0),abs(1, aux243),abs(aux62, aux244),w-literal(edges_00002_00002_00001,0)})
watched-or({w-literal(edges_00001_00001_00003,0),abs(1, aux245),abs(aux63, aux246),w-literal(edges_00002_00002_00002,0)})
watched-or({abs(1, aux247),abs(aux64, aux248),w-literal(edges_00001_00002_00001,0),w-literal(edges_00002_00003_00000,0)})
watched-or({abs(1, aux249),abs(aux65, aux250),w-literal(edges_00001_00002_00002,0),w-literal(edges_00002_00003_00001,0)})
watched-or({abs(1, aux251),abs(aux66, aux252),w-literal(edges_00001_00002_00003,0),w-literal(edges_00002_00003_00002,0)})
watched-or({w-literal(edges_00001_00000_00001,0),w-literal(edges_00002_00001_00001,0),abs(1, aux253),abs(aux67, aux254)})
watched-or({w-literal(edges_00001_00000_00002,0),w-literal(edges_00002_00001_00002,0),abs(1, aux255),abs(aux68, aux256)})
watched-or({w-literal(edges_00001_00000_00003,0),w-literal(edges_00002_00001_00003,0),abs(1, aux257),abs(aux69, aux258)})
watched-or({w-literal(edges_00001_00001_00001,0),abs(1, aux259),abs(aux70, aux260),w-literal(edges_00002_00002_00001,0)})
watched-or({w-literal(edges_00001_00001_00002,0),abs(1, aux261),abs(aux71, aux262),w-literal(edges_00002_00002_00002,0)})
watched-or({w-literal(edges_00001_00001_00003,0),abs(1, aux263),abs(aux72, aux264),w-literal(edges_00002_00002_00003,0)})
watched-or({abs(1, aux265),abs(aux73, aux266),w-literal(edges_00001_00002_00001,0),w-literal(edges_00002_00003_00001,0)})
watched-or({abs(1, aux267),abs(aux74, aux268),w-literal(edges_00001_00002_00002,0),w-literal(edges_00002_00003_00002,0)})
watched-or({abs(1, aux269),abs(aux75, aux270),w-literal(edges_00001_00002_00003,0),w-literal(edges_00002_00003_00003,0)})
watched-or({abs(1, aux271),abs(aux76, aux272),w-literal(edges_00002_00001_00000,0),w-literal(edges_00001_00001_00001,0)})
watched-or({abs(1, aux273),abs(aux77, aux274),w-literal(edges_00002_00001_00001,0),w-literal(edges_00001_00001_00002,0)})
watched-or({abs(1, aux275),abs(aux78, aux276),w-literal(edges_00002_00001_00002,0),w-literal(edges_00001_00001_00003,0)})
watched-or({w-literal(edges_00002_00002_00000,0),w-literal(edges_00001_00002_00001,0),abs(1, aux277),abs(aux79, aux278)})
watched-or({w-literal(edges_00002_00002_00001,0),w-literal(edges_00001_00002_00002,0),abs(1, aux279),abs(aux80, aux280)})
watched-or({w-literal(edges_00002_00002_00002,0),w-literal(edges_00001_00002_00003,0),abs(1, aux281),abs(aux81, aux282)})
watched-or({abs(1, aux283),abs(aux82, aux284),w-literal(edges_00002_00003_00000,0),w-literal(edges_00001_00003_00001,0)})
watched-or({abs(1, aux285),abs(aux83, aux286),w-literal(edges_00002_00003_00001,0),w-literal(edges_00001_00003_00002,0)})
watched-or({abs(1, aux287),abs(aux84, aux288),w-literal(edges_00002_00003_00002,0),w-literal(edges_00001_00003_00003,0)})
reifyimply(ineq(conjure_aux1, 1, 0), aux289)
reifyimply(ineq(conjure_aux1, 1, 0), aux290)
reifyimply(ineq(conjure_aux1, 1, 0), aux291)
reifyimply(ineq(conjure_aux1, 2, 0), aux292)
reifyimply(ineq(conjure_aux1, 2, 0), aux293)
reifyimply(ineq(conjure_aux1, 2, 0), aux294)
reifyimply(ineq(conjure_aux2, 1, 0), aux296)
reifyimply(ineq(conjure_aux2, 2, 0), aux298)
w-inintervalset(aux0,[0,1])
w-inintervalset(aux1,[0,1])
w-inintervalset(aux2,[0,1])
w-inintervalset(aux3,[0,1])
w-inintervalset(aux4,[0,1])
w-inintervalset(aux5,[0,1])
w-inintervalset(aux6,[0,1])
w-inintervalset(aux7,[0,1])
w-inintervalset(aux8,[0,1])
w-inintervalset(aux9,[0,1])
w-inintervalset(aux10,[0,1])
w-inintervalset(aux11,[0,1])
w-inintervalset(aux12,[0,1])
w-inintervalset(aux13,[0,1])
w-inintervalset(aux14,[0,1])
w-inintervalset(aux15,[0,1])
w-inintervalset(aux16,[0,1])
w-inintervalset(aux17,[0,1])
w-inintervalset(aux18,[0,1])
w-inintervalset(aux19,[0,1])
w-inintervalset(aux20,[0,1])
w-inintervalset(aux21,[0,1])
w-inintervalset(aux22,[0,1])
w-inintervalset(aux23,[0,1])
w-inintervalset(aux24,[0,1])
gccweak([aux300, aux302, aux304, aux306, aux308, aux310, aux312, aux314, aux316, aux318, aux320, aux322, aux324, aux326, aux328, aux330, aux332, aux334, aux336, aux338, aux340, aux342, aux344, aux346, aux348, aux350, aux352, aux354, aux356, aux358, aux360, aux362],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],[aux0, aux1, aux2, aux3, aux4, aux5, aux6, aux7, aux8, aux9, aux10, aux11, aux12, aux13, aux14, aux15, aux16, aux17, aux18, aux19, aux20, aux21, aux22, aux23, aux24])
sumleq([aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24],32)
sumleq([-1,tlr],aux113)
sumgeq([-1,tlr],aux113)
sumleq([-1,tlr],aux114)
sumgeq([-1,tlr],aux114)
sumleq([-1,tlr],aux115)
sumgeq([-1,tlr],aux115)
sumleq([-1,tlr],aux116)
sumgeq([-1,tlr],aux116)
sumleq([-1,tlr],aux118)
sumgeq([-1,tlr],aux118)
sumleq([-1,tlr],aux120)
sumgeq([-1,tlr],aux120)
sumleq([-1,tlr],aux122)
sumgeq([-1,tlr],aux122)
sumleq([-1,tlr],aux124)
sumgeq([-1,tlr],aux124)
sumleq([-1,tlr],aux126)
sumgeq([-1,tlr],aux126)
sumleq([-1,tlr],aux129)
sumgeq([-1,tlr],aux129)
sumleq([-1,tlr],aux131)
sumgeq([-1,tlr],aux131)
sumleq([-1,tlr],aux133)
sumgeq([-1,tlr],aux133)
weightedsumleq([1,1,4],[-5,tlc,tlr],aux135)
weightedsumgeq([1,1,4],[-5,tlc,tlr],aux135)
weightedsumleq([1,1,4],[-5,tlc,tlr],aux136)
weightedsumgeq([1,1,4],[-5,tlc,tlr],aux136)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00000,loop_FunctionND_00001_00000_00001],aux169)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00000,loop_FunctionND_00001_00000_00001],aux169)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00000,loop_FunctionND_00001_00000_00001],aux170)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00000,loop_FunctionND_00001_00000_00001],aux170)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00001_00000_00002],aux171)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00001_00000_00002],aux171)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00001_00000_00002],aux172)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00001_00000_00002],aux172)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00001_00000_00003],aux173)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00001_00000_00003],aux173)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00001_00000_00003],aux174)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00001_00000_00003],aux174)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00000,loop_FunctionND_00001_00001_00001],aux175)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00000,loop_FunctionND_00001_00001_00001],aux175)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00000,loop_FunctionND_00001_00001_00001],aux176)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00000,loop_FunctionND_00001_00001_00001],aux176)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00001_00001_00002],aux177)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00001_00001_00002],aux177)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00001_00001_00002],aux178)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00001_00001_00002],aux178)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00001_00001_00003],aux179)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00001_00001_00003],aux179)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00001_00001_00003],aux180)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00001_00001_00003],aux180)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00000,loop_FunctionND_00001_00002_00001],aux181)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00000,loop_FunctionND_00001_00002_00001],aux181)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00000,loop_FunctionND_00001_00002_00001],aux182)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00000,loop_FunctionND_00001_00002_00001],aux182)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00001,loop_FunctionND_00001_00002_00002],aux183)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00001,loop_FunctionND_00001_00002_00002],aux183)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00001,loop_FunctionND_00001_00002_00002],aux184)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00001,loop_FunctionND_00001_00002_00002],aux184)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00002,loop_FunctionND_00001_00002_00003],aux185)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00002,loop_FunctionND_00001_00002_00003],aux185)
weightedsumleq([1,-1],[loop_FunctionND_00001_00002_00002,loop_FunctionND_00001_00002_00003],aux186)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00002_00002,loop_FunctionND_00001_00002_00003],aux186)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00000,loop_FunctionND_00001_00003_00001],aux187)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00000,loop_FunctionND_00001_00003_00001],aux187)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00000,loop_FunctionND_00001_00003_00001],aux188)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00000,loop_FunctionND_00001_00003_00001],aux188)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00001,loop_FunctionND_00001_00003_00002],aux189)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00001,loop_FunctionND_00001_00003_00002],aux189)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00001,loop_FunctionND_00001_00003_00002],aux190)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00001,loop_FunctionND_00001_00003_00002],aux190)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00002,loop_FunctionND_00001_00003_00003],aux191)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00002,loop_FunctionND_00001_00003_00003],aux191)
weightedsumleq([1,-1],[loop_FunctionND_00001_00003_00002,loop_FunctionND_00001_00003_00003],aux192)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00003_00002,loop_FunctionND_00001_00003_00003],aux192)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00000,loop_FunctionND_00002_00001_00000],aux193)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00000,loop_FunctionND_00002_00001_00000],aux193)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00000,loop_FunctionND_00002_00001_00000],aux194)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00000,loop_FunctionND_00002_00001_00000],aux194)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00001,loop_FunctionND_00002_00001_00001],aux195)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00001,loop_FunctionND_00002_00001_00001],aux195)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00001,loop_FunctionND_00002_00001_00001],aux196)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00001,loop_FunctionND_00002_00001_00001],aux196)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00002,loop_FunctionND_00002_00001_00002],aux197)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00002,loop_FunctionND_00002_00001_00002],aux197)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00002,loop_FunctionND_00002_00001_00002],aux198)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00002,loop_FunctionND_00002_00001_00002],aux198)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00003,loop_FunctionND_00002_00001_00003],aux199)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00003,loop_FunctionND_00002_00001_00003],aux199)
weightedsumleq([1,-1],[loop_FunctionND_00002_00000_00003,loop_FunctionND_00002_00001_00003],aux200)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00000_00003,loop_FunctionND_00002_00001_00003],aux200)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00002_00002_00000],aux201)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00002_00002_00000],aux201)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00002_00002_00000],aux202)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00002_00002_00000],aux202)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00002_00002_00001],aux203)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00002_00002_00001],aux203)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00002_00002_00001],aux204)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00002_00002_00001],aux204)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00002_00002_00002],aux205)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00002_00002_00002],aux205)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00002_00002_00002],aux206)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00002_00002_00002],aux206)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00002_00002_00003],aux207)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00002_00002_00003],aux207)
weightedsumleq([1,-1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00002_00002_00003],aux208)
weightedsumgeq([1,-1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00002_00002_00003],aux208)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00002_00002_00000],aux209)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00002_00002_00000],aux209)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00002_00002_00000],aux210)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00002_00002_00000],aux210)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00002_00002_00001],aux211)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00002_00002_00001],aux211)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00002_00002_00001],aux212)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00002_00002_00001],aux212)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00002_00002_00002],aux213)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00002_00002_00002],aux213)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00002_00002_00002],aux214)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00002_00002_00002],aux214)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00002_00002_00003],aux215)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00002_00002_00003],aux215)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00002_00002_00003],aux216)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00002_00002_00003],aux216)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00001],aux217)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00001],aux217)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00001],aux218)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00001],aux218)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00002],aux219)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00002],aux219)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00002],aux220)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00002],aux220)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00001_00001_00003],aux221)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00001_00001_00003],aux221)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00001_00001_00003],aux222)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00003,loop_FunctionND_00001_00001_00003],aux222)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00001],aux223)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00001],aux223)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00001],aux224)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00001],aux224)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00002],aux225)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00002],aux225)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00002],aux226)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00002],aux226)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00003,loop_FunctionND_00001_00002_00003],aux227)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00003,loop_FunctionND_00001_00002_00003],aux227)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00003,loop_FunctionND_00001_00002_00003],aux228)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00003,loop_FunctionND_00001_00002_00003],aux228)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00001],aux229)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00001],aux229)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00001],aux230)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00001],aux230)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00002],aux231)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00002],aux231)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00002],aux232)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00002],aux232)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00003_00003],aux233)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00003_00003],aux233)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00003_00003],aux234)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00003_00003],aux234)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00000],aux235)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00000],aux235)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00000],aux236)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00000],aux236)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00001],aux237)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00001],aux237)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00001],aux238)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00001],aux238)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00002],aux239)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00002],aux239)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00002],aux240)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00002],aux240)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00000],aux241)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00000],aux241)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00000],aux242)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00000],aux242)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00001],aux243)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00001],aux243)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00001],aux244)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00001],aux244)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00002],aux245)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00002],aux245)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00002],aux246)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00002],aux246)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00002_00001],aux247)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00002_00001],aux247)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00002_00001],aux248)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00002_00001],aux248)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00002],aux249)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00002],aux249)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00002],aux250)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00002],aux250)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00003],aux251)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00003],aux251)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00003],aux252)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00003],aux252)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00001],aux253)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00001],aux253)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00001],aux254)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00001,loop_FunctionND_00002_00001_00001],aux254)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00002],aux255)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00002],aux255)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00002],aux256)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00002,loop_FunctionND_00002_00001_00002],aux256)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00003],aux257)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00003],aux257)
weightedsumleq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00003],aux258)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00000_00003,loop_FunctionND_00002_00001_00003],aux258)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00001],aux259)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00001],aux259)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00001],aux260)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00001,loop_FunctionND_00002_00002_00001],aux260)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00002],aux261)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00002],aux261)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00002],aux262)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00002,loop_FunctionND_00002_00002_00002],aux262)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00003],aux263)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00003],aux263)
weightedsumleq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00003],aux264)
weightedsumgeq([1,-1],[loop_FunctionND_00001_00001_00003,loop_FunctionND_00002_00002_00003],aux264)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00001],aux265)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00001],aux265)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00001],aux266)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00002_00001],aux266)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00002],aux267)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00002],aux267)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00002],aux268)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00002_00002],aux268)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00002_00003],aux269)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00002_00003],aux269)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00002_00003],aux270)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00003,loop_FunctionND_00001_00002_00003],aux270)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00001_00001_00001],aux271)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00001_00001_00001],aux271)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00001_00001_00001],aux272)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00000,loop_FunctionND_00001_00001_00001],aux272)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00002],aux273)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00002],aux273)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00002],aux274)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00001,loop_FunctionND_00001_00001_00002],aux274)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00003],aux275)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00003],aux275)
weightedsumleq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00003],aux276)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00001_00002,loop_FunctionND_00001_00001_00003],aux276)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00000,loop_FunctionND_00001_00002_00001],aux277)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00000,loop_FunctionND_00001_00002_00001],aux277)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00000,loop_FunctionND_00001_00002_00001],aux278)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00000,loop_FunctionND_00001_00002_00001],aux278)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00002],aux279)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00002],aux279)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00002],aux280)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00001,loop_FunctionND_00001_00002_00002],aux280)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00003],aux281)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00003],aux281)
weightedsumleq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00003],aux282)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00002_00002,loop_FunctionND_00001_00002_00003],aux282)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00003_00001],aux283)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00003_00001],aux283)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00003_00001],aux284)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00000,loop_FunctionND_00001_00003_00001],aux284)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00002],aux285)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00002],aux285)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00002],aux286)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00001,loop_FunctionND_00001_00003_00002],aux286)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00003],aux287)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00003],aux287)
weightedsumleq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00003],aux288)
weightedsumgeq([-1,1],[loop_FunctionND_00002_00003_00002,loop_FunctionND_00001_00003_00003],aux288)
sumleq([-1,tlr],aux295)
sumgeq([-1,tlr],aux295)
sumleq([-1,tlr],aux297)
sumgeq([-1,tlr],aux297)
sumleq([1,loop_FunctionND_00001_00001_00000],aux299)
sumgeq([1,loop_FunctionND_00001_00001_00000],aux299)
sumleq([1,loop_FunctionND_00001_00001_00001],aux301)
sumgeq([1,loop_FunctionND_00001_00001_00001],aux301)
sumleq([1,loop_FunctionND_00001_00001_00002],aux303)
sumgeq([1,loop_FunctionND_00001_00001_00002],aux303)
sumleq([1,loop_FunctionND_00001_00001_00003],aux305)
sumgeq([1,loop_FunctionND_00001_00001_00003],aux305)
sumleq([loop_FunctionND_00002_00000_00000,1],aux307)
sumgeq([loop_FunctionND_00002_00000_00000,1],aux307)
sumleq([loop_FunctionND_00002_00000_00001,1],aux309)
sumgeq([loop_FunctionND_00002_00000_00001,1],aux309)
sumleq([loop_FunctionND_00002_00000_00002,1],aux311)
sumgeq([loop_FunctionND_00002_00000_00002,1],aux311)
sumleq([loop_FunctionND_00002_00000_00003,1],aux313)
sumgeq([loop_FunctionND_00002_00000_00003,1],aux313)
sumleq([loop_FunctionND_00001_00003_00000,1],aux315)
sumgeq([loop_FunctionND_00001_00003_00000,1],aux315)
sumleq([loop_FunctionND_00001_00003_00001,1],aux317)
sumgeq([loop_FunctionND_00001_00003_00001,1],aux317)
sumleq([loop_FunctionND_00001_00003_00002,1],aux319)
sumgeq([loop_FunctionND_00001_00003_00002,1],aux319)
sumleq([loop_FunctionND_00001_00003_00003,1],aux321)
sumgeq([loop_FunctionND_00001_00003_00003,1],aux321)
sumleq([1,loop_FunctionND_00002_00002_00000],aux323)
sumgeq([1,loop_FunctionND_00002_00002_00000],aux323)
sumleq([1,loop_FunctionND_00002_00002_00001],aux325)
sumgeq([1,loop_FunctionND_00002_00002_00001],aux325)
sumleq([1,loop_FunctionND_00002_00002_00002],aux327)
sumgeq([1,loop_FunctionND_00002_00002_00002],aux327)
sumleq([1,loop_FunctionND_00002_00002_00003],aux329)
sumgeq([1,loop_FunctionND_00002_00002_00003],aux329)
sumleq([loop_FunctionND_00002_00003_00000,1],aux331)
sumgeq([loop_FunctionND_00002_00003_00000,1],aux331)
sumleq([loop_FunctionND_00002_00003_00001,1],aux333)
sumgeq([loop_FunctionND_00002_00003_00001,1],aux333)
sumleq([loop_FunctionND_00002_00003_00002,1],aux335)
sumgeq([loop_FunctionND_00002_00003_00002,1],aux335)
sumleq([loop_FunctionND_00002_00003_00003,1],aux337)
sumgeq([loop_FunctionND_00002_00003_00003,1],aux337)
sumleq([1,loop_FunctionND_00001_00002_00000],aux339)
sumgeq([1,loop_FunctionND_00001_00002_00000],aux339)
sumleq([1,loop_FunctionND_00001_00002_00001],aux341)
sumgeq([1,loop_FunctionND_00001_00002_00001],aux341)
sumleq([1,loop_FunctionND_00001_00002_00002],aux343)
sumgeq([1,loop_FunctionND_00001_00002_00002],aux343)
sumleq([1,loop_FunctionND_00001_00002_00003],aux345)
sumgeq([1,loop_FunctionND_00001_00002_00003],aux345)
sumleq([1,loop_FunctionND_00002_00001_00000],aux347)
sumgeq([1,loop_FunctionND_00002_00001_00000],aux347)
sumleq([1,loop_FunctionND_00002_00001_00001],aux349)
sumgeq([1,loop_FunctionND_00002_00001_00001],aux349)
sumleq([1,loop_FunctionND_00002_00001_00002],aux351)
sumgeq([1,loop_FunctionND_00002_00001_00002],aux351)
sumleq([1,loop_FunctionND_00002_00001_00003],aux353)
sumgeq([1,loop_FunctionND_00002_00001_00003],aux353)
sumleq([loop_FunctionND_00001_00000_00000,1],aux355)
sumgeq([loop_FunctionND_00001_00000_00000,1],aux355)
sumleq([loop_FunctionND_00001_00000_00001,1],aux357)
sumgeq([loop_FunctionND_00001_00000_00001,1],aux357)
sumleq([loop_FunctionND_00001_00000_00002,1],aux359)
sumgeq([loop_FunctionND_00001_00000_00002,1],aux359)
sumleq([loop_FunctionND_00001_00000_00003,1],aux361)
sumgeq([loop_FunctionND_00001_00000_00003,1],aux361)
sumleq([-1,q],aux25)
sumgeq([-1,q],aux25)
sumleq([-1,q],aux26)
sumgeq([-1,q],aux26)
sumleq([-1,q],aux27)
sumgeq([-1,q],aux27)
sumleq([-1,q],aux28)
sumgeq([-1,q],aux28)
sumleq([-1,q],aux29)
sumgeq([-1,q],aux29)
sumleq([-1,q],aux30)
sumgeq([-1,q],aux30)
sumleq([-1,q],aux31)
sumgeq([-1,q],aux31)
sumleq([-1,q],aux32)
sumgeq([-1,q],aux32)
sumleq([-1,q],aux33)
sumgeq([-1,q],aux33)
sumleq([-1,q],aux34)
sumgeq([-1,q],aux34)
sumleq([-1,q],aux35)
sumgeq([-1,q],aux35)
sumleq([-1,q],aux36)
sumgeq([-1,q],aux36)
sumleq([-1,q],aux37)
sumgeq([-1,q],aux37)
sumleq([-1,q],aux38)
sumgeq([-1,q],aux38)
sumleq([-1,q],aux39)
sumgeq([-1,q],aux39)
sumleq([-1,q],aux40)
sumgeq([-1,q],aux40)
sumleq([-1,q],aux41)
sumgeq([-1,q],aux41)
sumleq([-1,q],aux42)
sumgeq([-1,q],aux42)
sumleq([-1,q],aux43)
sumgeq([-1,q],aux43)
sumleq([-1,q],aux44)
sumgeq([-1,q],aux44)
sumleq([-1,q],aux45)
sumgeq([-1,q],aux45)
sumleq([-1,q],aux46)
sumgeq([-1,q],aux46)
sumleq([-1,q],aux47)
sumgeq([-1,q],aux47)
sumleq([-1,q],aux48)
sumgeq([-1,q],aux48)
sumleq([-1,q],aux49)
sumgeq([-1,q],aux49)
sumleq([-1,q],aux50)
sumgeq([-1,q],aux50)
sumleq([-1,q],aux51)
sumgeq([-1,q],aux51)
sumleq([-1,q],aux52)
sumgeq([-1,q],aux52)
sumleq([-1,q],aux53)
sumgeq([-1,q],aux53)
sumleq([-1,q],aux54)
sumgeq([-1,q],aux54)
sumleq([-1,q],aux55)
sumgeq([-1,q],aux55)
sumleq([-1,q],aux56)
sumgeq([-1,q],aux56)
sumleq([-1,q],aux57)
sumgeq([-1,q],aux57)
sumleq([-1,q],aux58)
sumgeq([-1,q],aux58)
sumleq([-1,q],aux59)
sumgeq([-1,q],aux59)
sumleq([-1,q],aux60)
sumgeq([-1,q],aux60)
sumleq([-1,q],aux61)
sumgeq([-1,q],aux61)
sumleq([-1,q],aux62)
sumgeq([-1,q],aux62)
sumleq([-1,q],aux63)
sumgeq([-1,q],aux63)
sumleq([-1,q],aux64)
sumgeq([-1,q],aux64)
sumleq([-1,q],aux65)
sumgeq([-1,q],aux65)
sumleq([-1,q],aux66)
sumgeq([-1,q],aux66)
sumleq([-1,q],aux67)
sumgeq([-1,q],aux67)
sumleq([-1,q],aux68)
sumgeq([-1,q],aux68)
sumleq([-1,q],aux69)
sumgeq([-1,q],aux69)
sumleq([-1,q],aux70)
sumgeq([-1,q],aux70)
sumleq([-1,q],aux71)
sumgeq([-1,q],aux71)
sumleq([-1,q],aux72)
sumgeq([-1,q],aux72)
sumleq([-1,q],aux73)
sumgeq([-1,q],aux73)
sumleq([-1,q],aux74)
sumgeq([-1,q],aux74)
sumleq([-1,q],aux75)
sumgeq([-1,q],aux75)
sumleq([-1,q],aux76)
sumgeq([-1,q],aux76)
sumleq([-1,q],aux77)
sumgeq([-1,q],aux77)
sumleq([-1,q],aux78)
sumgeq([-1,q],aux78)
sumleq([-1,q],aux79)
sumgeq([-1,q],aux79)
sumleq([-1,q],aux80)
sumgeq([-1,q],aux80)
sumleq([-1,q],aux81)
sumgeq([-1,q],aux81)
sumleq([-1,q],aux82)
sumgeq([-1,q],aux82)
sumleq([-1,q],aux83)
sumgeq([-1,q],aux83)
sumleq([-1,q],aux84)
sumgeq([-1,q],aux84)
sumleq([edges_00001_00001_00000,edges_00001_00001_00001,edges_00001_00001_00002,edges_00001_00001_00003,edges_00002_00002_00000,edges_00002_00002_00001,edges_00002_00002_00002,edges_00002_00002_00003,edges_00001_00002_00000,edges_00001_00002_00001,edges_00001_00002_00002,edges_00001_00002_00003,edges_00002_00003_00000,edges_00002_00003_00001,edges_00002_00003_00002,edges_00002_00003_00003,edges_00001_00003_00000,edges_00001_00003_00001,edges_00001_00003_00002,edges_00001_00003_00003,edges_00002_00000_00000,edges_00002_00000_00001,edges_00002_00000_00002,edges_00002_00000_00003,edges_00001_00000_00000,edges_00001_00000_00001,edges_00001_00000_00002,edges_00001_00000_00003,edges_00002_00001_00000,edges_00002_00001_00001,edges_00002_00001_00002,edges_00002_00001_00003],q)
sumgeq([edges_00001_00001_00000,edges_00001_00001_00001,edges_00001_00001_00002,edges_00001_00001_00003,edges_00002_00002_00000,edges_00002_00002_00001,edges_00002_00002_00002,edges_00002_00002_00003,edges_00001_00002_00000,edges_00001_00002_00001,edges_00001_00002_00002,edges_00001_00002_00003,edges_00002_00003_00000,edges_00002_00003_00001,edges_00002_00003_00002,edges_00002_00003_00003,edges_00001_00003_00000,edges_00001_00003_00001,edges_00001_00003_00002,edges_00001_00003_00003,edges_00002_00000_00000,edges_00002_00000_00001,edges_00002_00000_00002,edges_00002_00000_00003,edges_00001_00000_00000,edges_00001_00000_00001,edges_00001_00000_00002,edges_00001_00000_00003,edges_00002_00001_00000,edges_00002_00001_00001,edges_00002_00001_00002,edges_00002_00001_00003],q)
sumleq([edges_00001_00001_00002,edges_00002_00002_00001,edges_00002_00002_00002,edges_00001_00002_00002],3)
sumgeq([edges_00001_00001_00002,edges_00002_00002_00001,edges_00002_00002_00002,edges_00001_00002_00002],3)
sumleq([edges_00001_00002_00001,edges_00002_00003_00000,edges_00002_00003_00001,edges_00001_00003_00001],3)
sumgeq([edges_00001_00002_00001,edges_00002_00003_00000,edges_00002_00003_00001,edges_00001_00003_00001],3)
sumleq([edges_00001_00002_00003,edges_00002_00003_00002,edges_00002_00003_00003,edges_00001_00003_00003],3)
sumgeq([edges_00001_00002_00003,edges_00002_00003_00002,edges_00002_00003_00003,edges_00001_00003_00003],3)
**EOF**
